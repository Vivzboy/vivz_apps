Repository Code Compilation
Generated on: 2025-07-14 18:16:31.731051
Repository Path: /Users/user/cape-town-property-app/backend
================================================================================

File: test_backend.py
--------------------------------------------------------------------------------
"""
Quick test script to verify backend is working properly
Run this after starting your backend server
"""

import requests
import json
from datetime import datetime

# API base URL
API_URL = "http://localhost:8000"

def test_health():
    """Test health endpoint"""
    print("üè• Testing health endpoint...")
    try:
        response = requests.get(f"{API_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check passed: {data}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Cannot connect to backend. Is it running?")
        print("   Run: uvicorn main:app --reload")
        return False

def test_create_property():
    """Test creating a sample property"""
    print("\nüè† Testing property creation...")
    
    sample_property = {
        "title": "Test Property - Sea Point Gem",
        "area": "Sea Point",
        "price": 1500000,
        "bedrooms": 2,
        "bathrooms": 2,
        "size_sqm": 85,
        "property_type": "Apartment",
        "url": "https://example.com/test-property",
        "images": ["https://via.placeholder.com/300"],
        "highlights": ["Ocean views", "Modern kitchen", "Secure parking"],
        "neighborhood_vibe": "Vibrant beachfront living with cafes"
    }
    
    try:
        response = requests.post(
            f"{API_URL}/api/properties",
            json=sample_property,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Property created successfully!")
            print(f"   ID: {data['_id']}")
            print(f"   Title: {data['title']}")
            return data['_id']
        else:
            print(f"‚ùå Failed to create property: {response.status_code}")
            print(f"   Response: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Error creating property: {e}")
        return None

def test_get_properties():
    """Test getting properties"""
    print("\nüìã Testing property retrieval...")
    
    try:
        response = requests.get(f"{API_URL}/api/properties")
        
        if response.status_code == 200:
            properties = response.json()
            print(f"‚úÖ Retrieved {len(properties)} properties")
            
            if properties:
                print("   Sample property:")
                prop = properties[0]
                print(f"   - Title: {prop.get('title')}")
                print(f"   - Area: {prop.get('area')}")
                print(f"   - Price: R{prop.get('price', 0):,}")
            return True
        else:
            print(f"‚ùå Failed to get properties: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error getting properties: {e}")
        return False

def test_areas():
    """Test getting areas"""
    print("\nüìç Testing areas endpoint...")
    
    try:
        response = requests.get(f"{API_URL}/api/areas")
        
        if response.status_code == 200:
            areas = response.json()
            print(f"‚úÖ Retrieved {len(areas)} areas")
            for area in areas[:3]:  # Show first 3
                print(f"   - {area['area']}: {area['property_count']} properties")
            return True
        else:
            print(f"‚ùå Failed to get areas: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error getting areas: {e}")
        return False

def test_scraper_import():
    """Test scraper import endpoint"""
    print("\nüîÑ Testing scraper import...")
    
    sample_scraper_data = [
        {
            "title": "2 Bedroom Apartment",
            "area": "Camps Bay",
            "price": 2500000,
            "bedrooms": 2,
            "bathrooms": 2,
            "size_sqm": 95,
            "type": "Apartment",
            "url": "https://property24.com/test1",
            "selector_used": "div.listing"
        },
        {
            "title": "3 Bedroom House",
            "area": "Green Point",
            "price": 3200000,
            "bedrooms": 3,
            "bathrooms": 2,
            "size_sqm": 150,
            "type": "House",
            "url": "https://property24.com/test2",
            "selector_used": "div.property"
        }
    ]
    
    try:
        response = requests.post(
            f"{API_URL}/api/scraper/import",
            json=sample_scraper_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Scraper import successful!")
            print(f"   Processed: {result['processed']} properties")
            print(f"   Total in DB: {result['total_properties']}")
            return True
        else:
            print(f"‚ùå Failed to import: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error importing: {e}")
        return False

def main():
    """Run all tests"""
    print("üß™ Testing Cape Town Property Backend...")
    print("=" * 50)
    
    # Check if backend is running
    if not test_health():
        print("\n‚ùó Please start the backend first:")
        print("   cd backend")
        print("   uvicorn main:app --reload")
        return
    
    # Run tests
    test_create_property()
    test_get_properties()
    test_areas()
    test_scraper_import()
    
    print("\n" + "=" * 50)
    print("‚úÖ All tests completed!")
    print("\nüì± Your frontend should now be able to connect to:")
    print(f"   {API_URL}")
    print("\nüìö View API documentation at:")
    print(f"   {API_URL}/docs")

if __name__ == "__main__":
    main()
    

================================================================================

File: debug_transformation.json
--------------------------------------------------------------------------------
{
  "scraped_sample": {
    "price": 4300000,
    "bedrooms": 3,
    "size_sqm": 118,
    "type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115916958?plId=2080963&plt=2&plsIds=2108550",
    "images": [
      "https://images.prop24.com/356228667/Crop525x350",
      "https://images.prop24.com/305274001/Ensure450x261",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "selector_used": "div[class*=\"listing\"]"
  },
  "transformed_sample": {
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "price": 4300000,
    "bedrooms": 3,
    "size_sqm": 118,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115916958?plId=2080963&plt=2&plsIds=2108550",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/356228667/Crop525x350",
      "https://images.prop24.com/305274001/Ensure450x261",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  "transformation_check": {
    "scraped_has_images": true,
    "transformed_has_images": true
  }
}

================================================================================

File: compile_repo.py
--------------------------------------------------------------------------------
import os
import datetime

def compile_repository_code(repo_path, output_file):
    """
    Recursively compile all code files from a repository into a single text file
    with file structure references.
    
    Args:
        repo_path (str): Path to the repository root directory
        output_file (str): Path where the output file will be created
    """
    # List of file extensions to include
    code_extensions = {
        '.js', '.jsx', '.ts', '.tsx',  # JavaScript/TypeScript
        '.css', '.scss', '.sass',      # Stylesheets
        '.html', '.htm',               # HTML
        '.json',                       # JSON files
        '.md',                         # Markdown
        '.yml', '.yaml',                 # YAML
        '.py',
    }
    
    # Files/directories to ignore
    ignore_patterns = {
        'node_modules',
        '.git',
        'build',
        'dist',
        '.DS_Store',
        '__pycache__',
        'coverage',
        'venv'
    }

    with open(output_file, 'w', encoding='utf-8') as outfile:
        # Write header with timestamp
        outfile.write(f"Repository Code Compilation\n")
        outfile.write(f"Generated on: {datetime.datetime.now()}\n")
        outfile.write(f"Repository Path: {os.path.abspath(repo_path)}\n")
        outfile.write("="* 80 + "\n\n")

        for root, dirs, files in os.walk(repo_path):
            # Remove ignored directories
            dirs[:] = [d for d in dirs if d not in ignore_patterns]
            
            # Process each file
            for file in files:
                if any(file.endswith(ext) for ext in code_extensions) and not any(ignore in file for ignore in ignore_patterns):
                    file_path = os.path.join(root, file)
                    rel_path = os.path.relpath(file_path, repo_path)
                    
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            
                            # Write file header
                            outfile.write(f"File: {rel_path}\n")
                            outfile.write("-" * 80 + "\n")
                            
                            # Write file content
                            outfile.write(content)
                            outfile.write("\n\n" + "=" * 80 + "\n\n")
                    except Exception as e:
                        outfile.write(f"Error reading file {rel_path}: {str(e)}\n\n")

if __name__ == "__main__":
    # Get the current directory as default repo path
    default_repo_path = os.getcwd()
    
    # Get user input for paths
    repo_path = input(f"Enter repository path (press Enter for current directory - {default_repo_path}): ").strip()
    if not repo_path:
        repo_path = default_repo_path
    
    output_file = input("Enter output file path (default: repo_code_compilation.txt): ").strip()
    if not output_file:
        output_file = "repo_code_compilation.txt"
    
    # Run the compilation
    try:
        compile_repository_code(repo_path, output_file)
        print(f"\nCode compilation completed successfully!")
        print(f"Output file: {os.path.abspath(output_file)}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

================================================================================

File: image_test.py
--------------------------------------------------------------------------------
"""
Check and fix the backend to ensure images are saved
"""

import requests
import json

def check_property_model():
    """Check if the backend Property model includes images"""
    
    print("üîç Checking backend Property model...\n")
    
    # First, let's see what fields are returned by the API
    response = requests.get("http://localhost:8000/api/properties?limit=1")
    if response.status_code == 200 and response.json():
        property_example = response.json()[0]
        print("Fields in API response:")
        for field in property_example.keys():
            print(f"  - {field}")
        
        if 'images' in property_example:
            print("\n‚úÖ 'images' field exists in API response")
        else:
            print("\n‚ùå 'images' field MISSING from API response!")
    
    # Check the OpenAPI schema
    print("\nüìã Checking API documentation...")
    try:
        response = requests.get("http://localhost:8000/openapi.json")
        if response.status_code == 200:
            openapi = response.json()
            # Look for PropertyResponse schema
            schemas = openapi.get('components', {}).get('schemas', {})
            prop_response = schemas.get('PropertyResponse', {})
            if prop_response:
                properties = prop_response.get('properties', {})
                if 'images' in properties:
                    print("‚úÖ 'images' field defined in PropertyResponse schema")
                    print(f"   Type: {properties['images']}")
                else:
                    print("‚ùå 'images' field NOT in PropertyResponse schema!")
    except:
        pass

def test_direct_property_creation():
    """Test creating a property directly (not via scraper import)"""
    
    print("\n\nüß™ Testing direct property creation with images...")
    
    test_property = {
        "title": "Direct Test Property",
        "area": "test-area",
        "price": 999999,
        "bedrooms": 2,
        "bathrooms": 1,
        "size_sqm": 80,
        "property_type": "Apartment",
        "images": [
            "https://test.com/image1.jpg",
            "https://test.com/image2.jpg",
            "https://test.com/image3.jpg"
        ],
        "highlights": ["Test Feature 1", "Test Feature 2"]
    }
    
    # Create via direct API
    response = requests.post(
        "http://localhost:8000/api/properties",
        json=test_property,
        headers={"Content-Type": "application/json"}
    )
    
    if response.status_code == 200:
        created = response.json()
        print(f"‚úÖ Created property: {created.get('title')}")
        print(f"   ID: {created.get('id', created.get('_id'))}")
        print(f"   Images in response: {len(created.get('images', []))}")
        
        if created.get('images'):
            print("   ‚úÖ Direct creation PRESERVES images!")
        else:
            print("   ‚ùå Direct creation LOSES images!")
            
        return created.get('id', created.get('_id'))
    else:
        print(f"‚ùå Creation failed: {response.status_code}")
        print(f"   Error: {response.text}")
        return None

def check_convert_function():
    """The issue might be in convert_scraper_output_to_property function"""
    
    print("\n\nüîç Issue likely in backend's convert_scraper_output_to_property()...")
    print("\nThe function in models/property.py might not be handling images.")
    print("\nCheck if it includes this line:")
    print("    images=scraper_data.get('images', []),")
    print("\nOr it might be using the wrong key.")

def manual_fix_suggestion():
    """Suggest the manual fix needed"""
    
    print("\n\nüîß MANUAL FIX NEEDED:")
    print("\nIn your backend's models/property.py, find the convert_scraper_output_to_property function")
    print("and make sure it includes:")
    print("""
def convert_scraper_output_to_property(scraper_data: dict) -> PropertyCreate:
    property_data = PropertyCreate(
        title=scraper_data.get("title", "Property"),
        area=scraper_data.get("area", "Unknown"),
        price=scraper_data.get("price"),
        bedrooms=scraper_data.get("bedrooms"),
        bathrooms=scraper_data.get("bathrooms"),
        size_sqm=scraper_data.get("size_sqm"),
        property_type=scraper_data.get("type", "Property"),
        url=scraper_data.get("url"),
        images=scraper_data.get("images", []),  # ‚Üê THIS LINE IS CRITICAL!
        highlights=scraper_data.get("highlights", []),
        neighborhood_vibe=scraper_data.get("neighborhood_vibe"),
        selector_used=scraper_data.get("selector_used"),
        listed_date=datetime.now()
    )
    return property_data
""")

if __name__ == "__main__":
    check_property_model()
    property_id = test_direct_property_creation()
    check_convert_function()
    manual_fix_suggestion()

================================================================================

File: populate_db.py
--------------------------------------------------------------------------------
"""
Enhanced populate script with optional database cleanup
"""

import sys
import os
import requests
import time
import logging
import json
from datetime import datetime

# Add the backend directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from scraper.scraper import Property24Scraper

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

def clean_database():
    """
    Clean the database by removing all properties
    WARNING: This deletes ALL property data!
    """
    logger.warning("‚ö†Ô∏è  Cleaning database - this will DELETE all properties!")
    
    try:
        # First, get count of existing properties
        response = requests.get("http://localhost:8000/api/properties?limit=1000")
        if response.status_code == 200:
            existing_count = len(response.json())
            logger.info(f"üìä Found {existing_count} existing properties")
        
        # Since we don't have a delete endpoint, we need to add one
        # For now, we'll note this limitation
        logger.warning("‚ùå No delete endpoint available in current API")
        logger.info("üí° To clean database manually:")
        logger.info("   1. Connect to MongoDB")
        logger.info("   2. Run: db.properties.deleteMany({})")
        logger.info("   3. Run: db.comments.deleteMany({})")
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Error checking database: {e}")
        return False

def clean_area_properties(area: str):
    """
    Clean properties from a specific area only
    More targeted approach than full cleanup
    """
    logger.info(f"üßπ Cleaning properties from {area}...")
    
    # This would require an API endpoint like:
    # DELETE /api/properties?area=sea-point
    # Currently not implemented
    
    logger.warning("‚ùå Area-specific cleanup not available in current API")
    return False

def populate_database_smart(extract_images=True, max_pages=2, clean_first=False, 
                          clean_areas=None, update_existing=True):
    """
    Smart database population with various options
    
    Args:
        extract_images: Whether to extract images
        max_pages: Max pages per area to scrape
        clean_first: Whether to clean entire database first
        clean_areas: List of specific areas to clean before scraping
        update_existing: Whether to update existing properties
    """
    
    # 1. Check if backend is running
    logger.info("üîç Checking if backend is running...")
    try:
        response = requests.get("http://localhost:8000/health")
        if response.status_code != 200:
            raise Exception("Backend not healthy")
        
        health = response.json()
        db_status = health.get('database', {})
        logger.info("‚úÖ Backend is running!")
        logger.info(f"üìä Current database: {db_status.get('total_properties', 'unknown')} properties")
        
    except:
        logger.error("‚ùå Backend is not running! Please start it first:")
        logger.error("   cd backend")
        logger.error("   uvicorn main:app --reload")
        return False
    
    # 2. Optional cleanup
    if clean_first:
        logger.warning("\n‚ö†Ô∏è  CLEANUP REQUESTED - This will delete ALL properties!")
        response = input("Are you sure? Type 'yes' to confirm: ")
        if response.lower() == 'yes':
            clean_database()
        else:
            logger.info("‚ùå Cleanup cancelled")
    
    # 3. Get current property stats before scraping
    try:
        response = requests.get("http://localhost:8000/api/scraper/stats")
        if response.status_code == 200:
            stats = response.json()
            logger.info(f"\nüìä Before scraping:")
            logger.info(f"   Total properties: {stats.get('total_properties', 0)}")
            logger.info(f"   By area: {stats.get('properties_by_area', {})}")
    except:
        pass
    
    # 4. Initialize scraper
    logger.info("\nüöÄ Initializing Enhanced Property24 scraper...")
    scraper = Property24Scraper(delay_between_requests=1.0)
    
    # 5. Scrape areas
    areas_to_scrape = ["sea-point", "gardens", "green-point"]
    all_properties = []
    
    for area in areas_to_scrape:
        logger.info(f"\nüè† Scraping {area} (max {max_pages} pages)...")
        
        try:
            properties = scraper.scrape_area(
                area, 
                max_pages=max_pages,
                extract_images=extract_images
            )
            
            # Statistics
            with_images = sum(1 for p in properties if p.get('images'))
            logger.info(f"   Found {len(properties)} properties ({with_images} with images)")
            
            all_properties.extend(properties)
            time.sleep(2)
            
        except Exception as e:
            logger.error(f"   Error scraping {area}: {e}")
    
    if not all_properties:
        logger.error("‚ùå No properties found!")
        return False
    
    # 6. Transform and prepare for import
    logger.info(f"\nüîÑ Transforming {len(all_properties)} properties...")
    
    # Group by area for better logging
    by_area = {}
    api_properties = []
    
    for prop in all_properties:
        area = prop.get("area", "Unknown")
        if area not in by_area:
            by_area[area] = {"total": 0, "with_images": 0}
        
        by_area[area]["total"] += 1
        if prop.get("images"):
            by_area[area]["with_images"] += 1
        
        # Transform to API format
        api_prop = {
            "title": prop.get("title", "Property"),
            "area": area,
            "price": prop.get("price"),
            "bedrooms": prop.get("bedrooms"),
            "bathrooms": prop.get("bathrooms"),
            "size_sqm": prop.get("size_sqm"),
            "property_type": prop.get("type", "Property"),
            "url": prop.get("url"),
            "selector_used": prop.get("selector_used"),
            "images": prop.get("images", []),
            "highlights": prop.get("highlights", []),
            "neighborhood_vibe": prop.get("neighborhood_vibe"),
        }
        
        api_prop = {k: v for k, v in api_prop.items() if v is not None}
        api_properties.append(api_prop)
    
    # Show what we're about to import
    logger.info("\nüìã Ready to import:")
    for area, stats in by_area.items():
        logger.info(f"   {area}: {stats['total']} properties ({stats['with_images']} with images)")
    
    # 7. Import to backend
    logger.info("\nüì§ Importing to backend...")
    try:
        response = requests.post(
            "http://localhost:8000/api/scraper/import",
            json=api_properties,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"‚úÖ Import complete!")
            logger.info(f"   Processed: {result['processed']} properties")
            logger.info(f"   Errors: {result.get('errors', 0)}")
            logger.info(f"   Total in DB: {result['total_properties']}")
            
            # Calculate what happened
            new_properties = result['processed']
            updated_properties = len(api_properties) - new_properties
            logger.info(f"\nüìä Summary:")
            logger.info(f"   New properties added: {new_properties}")
            logger.info(f"   Existing properties updated: {updated_properties}")
            
        else:
            logger.error(f"‚ùå Import failed: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Import error: {e}")
        return False
    
    # 8. Final stats
    try:
        response = requests.get("http://localhost:8000/api/scraper/stats")
        if response.status_code == 200:
            stats = response.json()
            logger.info(f"\nüìä After scraping:")
            logger.info(f"   Total properties: {stats.get('total_properties', 0)}")
            logger.info(f"   Recent scrapes (7d): {stats.get('recent_scrapes_7d', 0)}")
            logger.info(f"   Last scrape: {stats.get('last_scrape', 'unknown')}")
    except:
        pass
    
    logger.info("\nüéâ Database population complete!")
    logger.info("üì± Visit http://localhost:5173 to see your properties!")
    
    return True

def show_database_info():
    """Show detailed database information"""
    logger.info("üìä Database Information")
    
    try:
        # Get stats
        response = requests.get("http://localhost:8000/api/scraper/stats")
        if response.status_code == 200:
            stats = response.json()
            
            logger.info(f"\nüìà Overview:")
            logger.info(f"   Total properties: {stats.get('total_properties', 0)}")
            logger.info(f"   Recent activity (7d): {stats.get('recent_scrapes_7d', 0)} properties")
            
            logger.info(f"\nüìç By Area:")
            for area, count in stats.get('properties_by_area', {}).items():
                logger.info(f"   {area}: {count} properties")
            
            logger.info(f"\nüè∑Ô∏è By Status:")
            for status, count in stats.get('properties_by_status', {}).items():
                logger.info(f"   {status}: {count} properties")
    
    except Exception as e:
        logger.error(f"‚ùå Error getting stats: {e}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Smart database population with options",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python populate_database.py                    # Normal population (adds to existing)
  python populate_database.py --clean           # Clean database first (DELETES ALL!)
  python populate_database.py --no-images       # Faster scraping without images
  python populate_database.py --pages 5         # Scrape more pages
  python populate_database.py --info            # Show database statistics
        """
    )
    
    parser.add_argument("--clean", action="store_true", 
                       help="‚ö†Ô∏è  Clean database before populating (DELETES ALL DATA!)")
    parser.add_argument("--no-images", action="store_true",
                       help="Skip image extraction (faster)")
    parser.add_argument("--pages", type=int, default=2,
                       help="Max pages per area to scrape (default: 2)")
    parser.add_argument("--info", action="store_true",
                       help="Show database information and exit")
    
    args = parser.parse_args()
    
    if args.info:
        show_database_info()
    else:
        populate_database_smart(
            extract_images=not args.no_images,
            max_pages=args.pages,
            clean_first=args.clean
        )

================================================================================

File: run_all.py
--------------------------------------------------------------------------------
#!/usr/bin/env python3
"""
Cape Town Property App - All-in-One Launcher üöÄ
Handles MongoDB, Backend API, and optionally Frontend
"""

import subprocess
import time
import os
import sys
import signal
import platform
import psutil
import socket

class Colors:
    """Terminal colors for pretty output"""
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_status(message, status="info"):
    """Print colored status messages"""
    colors = {
        "info": Colors.BLUE,
        "success": Colors.GREEN,
        "warning": Colors.YELLOW,
        "error": Colors.RED
    }
    color = colors.get(status, Colors.BLUE)
    print(f"{color}{Colors.BOLD}{message}{Colors.ENDC}")

def is_port_in_use(port):
    """Check if a port is already in use"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

def kill_process_on_port(port):
    """Kill process using a specific port"""
    try:
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                for conn in proc.connections():
                    if conn.laddr.port == port:
                        print_status(f"Killing {proc.info['name']} (PID: {proc.info['pid']}) on port {port}", "warning")
                        proc.terminate()
                        time.sleep(1)
                        if proc.is_running():
                            proc.kill()
                        return True
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
    except Exception as e:
        print_status(f"Error killing process on port {port}: {e}", "error")
    return False

def check_mongodb_installed():
    """Check if MongoDB is installed"""
    try:
        subprocess.run(["mongod", "--version"], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def start_mongodb():
    """Start MongoDB with proper error handling"""
    MONGODB_PORT = 27018  # Using custom port to avoid conflicts
    print_status(f"üóÑÔ∏è  Starting MongoDB on port {MONGODB_PORT}...", "info")
    
    # Check if MongoDB is installed
    if not check_mongodb_installed():
        print_status("MongoDB not found! Please install it first:", "error")
        print("  brew install mongodb-community  # Mac")
        print("  sudo apt install mongodb        # Ubuntu/Debian")
        return None
    
    # Check if MongoDB is already running on our custom port
    if is_port_in_use(MONGODB_PORT):
        print_status(f"MongoDB is already running on port {MONGODB_PORT}", "warning")
        response = input("Kill existing MongoDB process? (y/n): ")
        if response.lower() == 'y':
            kill_process_on_port(MONGODB_PORT)
            time.sleep(2)
        else:
            print_status("Using existing MongoDB instance", "success")
            return None
    
    # Create data directory if it doesn't exist
    data_dir = "/data/db"
    if platform.system() == "Darwin":  # macOS
        data_dir = os.path.expanduser("~/data/db")
    
    if not os.path.exists(data_dir):
        print_status(f"Creating MongoDB data directory: {data_dir}", "info")
        os.makedirs(data_dir, exist_ok=True)
    
    # Start MongoDB
    try:
        if platform.system() == "Darwin":  # macOS
            process = subprocess.Popen(
                ["mongod", "--dbpath", data_dir, "--port", str(MONGODB_PORT), "--quiet"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
        else:
            process = subprocess.Popen(
                ["mongod", "--port", str(MONGODB_PORT), "--quiet"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
        
        # Wait a bit and check if it started
        time.sleep(3)
        if process.poll() is None:
            print_status("‚úÖ MongoDB started successfully", "success")
            return process
        else:
            print_status("‚ùå MongoDB failed to start", "error")
            stderr = process.stderr.read().decode()
            print(stderr)
            return None
            
    except Exception as e:
        print_status(f"‚ùå Failed to start MongoDB: {e}", "error")
        return None

def start_backend():
    """Start the FastAPI backend"""
    print_status("üöÄ Starting Backend API...", "info")
    
    # Check if backend port is in use
    if is_port_in_use(8000):
        print_status("Port 8000 is already in use", "warning")
        response = input("Kill existing process on port 8000? (y/n): ")
        if response.lower() == 'y':
            kill_process_on_port(8000)
            time.sleep(2)
        else:
            return None
    
    # Change to backend directory
    backend_dir = os.path.join(os.path.dirname(__file__), "backend")
    if not os.path.exists(backend_dir):
        backend_dir = "."  # Already in backend directory
    
    # Check if main.py exists
    main_py = os.path.join(backend_dir, "main.py")
    if not os.path.exists(main_py):
        print_status("‚ùå main.py not found! Are you in the right directory?", "error")
        return None
    
    # Create .env file if it doesn't exist
    env_file = os.path.join(backend_dir, ".env")
    if not os.path.exists(env_file):
        print_status("üìù Creating .env file with custom MongoDB port...", "info")
        with open(env_file, 'w') as f:
            f.write("# Cape Town Property App Configuration\n")
            f.write("MONGODB_URL=mongodb://localhost:27018\n")
            f.write("DATABASE_NAME=cape_town_properties\n")
    
    # Install requirements if needed
    requirements_file = os.path.join(backend_dir, "requirements.txt")
    if os.path.exists(requirements_file):
        print_status("üì¶ Installing Python dependencies...", "info")
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", requirements_file], 
                      capture_output=True)
    
    # Set environment variables
    env = os.environ.copy()
    env["MONGODB_URL"] = "mongodb://localhost:27018"
    env["DATABASE_NAME"] = "cape_town_properties"
    
    # Start the backend
    try:
        process = subprocess.Popen(
            [sys.executable, "-m", "uvicorn", "main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"],
            cwd=backend_dir,
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # Wait for startup
        time.sleep(5)
        
        if process.poll() is None:
            print_status("‚úÖ Backend API started successfully", "success")
            print_status("   üìö API Docs: http://localhost:8000/docs", "info")
            print_status("   üè• Health: http://localhost:8000/health", "info")
            return process
        else:
            print_status("‚ùå Backend failed to start", "error")
            stderr = process.stderr.read().decode()
            print(stderr)
            return None
            
    except Exception as e:
        print_status(f"‚ùå Failed to start backend: {e}", "error")
        return None

def start_frontend():
    """Start the React frontend (optional)"""
    print_status("üé® Starting Frontend...", "info")
    
    # Check if frontend port is in use
    if is_port_in_use(5173):
        print_status("Port 5173 is already in use (frontend probably running)", "warning")
        return None
    
    # Find frontend directory
    possible_dirs = [".", "src", "../src", "../", "frontend", "../frontend"]
    frontend_dir = None
    
    for dir_path in possible_dirs:
        package_json = os.path.join(dir_path, "package.json")
        if os.path.exists(package_json):
            frontend_dir = dir_path
            break
    
    if not frontend_dir:
        print_status("‚ö†Ô∏è  Frontend directory not found (package.json missing)", "warning")
        print_status("   You can start it manually with: npm run dev", "info")
        return None
    
    # Install dependencies if needed
    node_modules = os.path.join(frontend_dir, "node_modules")
    if not os.path.exists(node_modules):
        print_status("üì¶ Installing frontend dependencies...", "info")
        subprocess.run(["npm", "install"], cwd=frontend_dir, capture_output=True)
    
    # Start frontend
    try:
        process = subprocess.Popen(
            ["npm", "run", "dev"],
            cwd=frontend_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        time.sleep(5)
        
        if process.poll() is None:
            print_status("‚úÖ Frontend started successfully", "success")
            print_status("   üåê App URL: http://localhost:5173", "info")
            return process
        else:
            print_status("‚ùå Frontend failed to start", "error")
            return None
            
    except Exception as e:
        print_status(f"‚ö†Ô∏è  Frontend start skipped: {e}", "warning")
        return None

def health_check():
    """Check if backend is healthy"""
    import requests
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print_status("‚úÖ Backend health check passed", "success")
            if data.get("database", {}).get("status") == "healthy":
                print_status("‚úÖ Database connection healthy", "success")
            return True
    except:
        pass
    return False

def create_sample_data():
    """Optional: Create sample data"""
    import requests
    
    print_status("üìù Creating sample properties...", "info")
    
    sample_properties = [
        {
            "title": "Stunning Sea Point Apartment",
            "area": "Sea Point",
            "price": 1850000,
            "bedrooms": 2,
            "bathrooms": 2,
            "size_sqm": 95,
            "property_type": "Apartment",
            "highlights": ["Ocean views", "Modern kitchen", "24h security"],
            "neighborhood_vibe": "Vibrant beachfront living"
        },
        {
            "title": "Modern Camps Bay Villa",
            "area": "Camps Bay",
            "price": 8500000,
            "bedrooms": 4,
            "bathrooms": 3,
            "size_sqm": 280,
            "property_type": "House",
            "highlights": ["Pool", "Mountain views", "Entertainment area"],
            "neighborhood_vibe": "Exclusive beach paradise"
        }
    ]
    
    try:
        response = requests.post(
            "http://localhost:8000/api/scraper/import",
            json=sample_properties
        )
        if response.status_code == 200:
            result = response.json()
            print_status(f"‚úÖ Created {result['processed']} sample properties", "success")
    except Exception as e:
        print_status(f"‚ö†Ô∏è  Could not create sample data: {e}", "warning")

def main():
    """Main launcher function"""
    print_status("üè† Cape Town Property App Launcher", "info")
    print_status("=" * 50, "info")
    
    processes = []
    
    # Parse arguments
    run_frontend = "--with-frontend" in sys.argv or "-f" in sys.argv
    create_samples = "--with-samples" in sys.argv or "-s" in sys.argv
    
    try:
        # Start MongoDB
        mongo_process = start_mongodb()
        if mongo_process:
            processes.append(mongo_process)
        
        # Start Backend
        backend_process = start_backend()
        if backend_process:
            processes.append(backend_process)
        else:
            print_status("‚ùå Backend failed to start, exiting...", "error")
            for p in processes:
                p.terminate()
            sys.exit(1)
        
        # Wait for backend to be ready
        print_status("‚è≥ Waiting for backend to initialize...", "info")
        time.sleep(3)
        
        # Health check
        if health_check():
            print_status("üéâ Backend is ready!", "success")
            
            # Create sample data if requested
            if create_samples:
                create_sample_data()
        else:
            print_status("‚ö†Ô∏è  Backend health check failed", "warning")
        
        # Start Frontend if requested
        if run_frontend:
            frontend_process = start_frontend()
            if frontend_process:
                processes.append(frontend_process)
        
        # Summary
        print_status("\n" + "=" * 50, "info")
        print_status("üéâ Cape Town Property App is running!", "success")
        print_status("\nüìç Access Points:", "info")
        print_status("   Backend API: http://localhost:8000", "info")
        print_status("   API Docs: http://localhost:8000/docs", "info")
        print_status("   Health Check: http://localhost:8000/health", "info")
        
        if run_frontend:
            print_status("   Frontend App: http://localhost:5173", "info")
        else:
            print_status("\nüí° To start frontend separately:", "info")
            print_status("   npm run dev", "info")
        
        print_status("\nüõë Press Ctrl+C to stop all services", "warning")
        
        # Keep running and handle shutdown
        while True:
            time.sleep(1)
            # Check if any process died
            for p in processes:
                if p and p.poll() is not None:
                    print_status(f"\n‚ö†Ô∏è  A process died unexpectedly", "error")
                    raise KeyboardInterrupt
            
    except KeyboardInterrupt:
        print_status("\n\nüõë Shutting down...", "warning")
        
        # Terminate all processes
        for process in processes:
            if process and process.poll() is None:
                process.terminate()
                
        # Give them time to shutdown gracefully
        time.sleep(2)
        
        # Force kill if still running
        for process in processes:
            if process and process.poll() is None:
                process.kill()
        
        print_status("‚úÖ All services stopped", "success")
        print_status("üëã Goodbye!", "info")

if __name__ == "__main__":
    # Show usage
    if "--help" in sys.argv or "-h" in sys.argv:
        print("Usage: python run_all.py [options]")
        print("\nOptions:")
        print("  -f, --with-frontend    Also start the React frontend")
        print("  -s, --with-samples     Create sample data after startup")
        print("  -h, --help            Show this help message")
        print("\nExamples:")
        print("  python run_all.py                    # Start MongoDB + Backend only")
        print("  python run_all.py -f                 # Start everything")
        print("  python run_all.py -f -s              # Start everything + sample data")
        sys.exit(0)
    
    main()
    

================================================================================

File: main.py
--------------------------------------------------------------------------------
"""
Cape Town Property Discovery Platform - FastAPI Backend with MongoDB
Main application file
"""

from fastapi import FastAPI, HTTPException, Query, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from typing import List, Optional
from datetime import datetime, timedelta
import logging
from beanie import PydanticObjectId  # Instead of: from bson import ObjectId

# Local imports
from database.database import init_database, close_database, check_database_health, create_indexes
from models.property import (
    Property, PropertyCreate, PropertyUpdate, PropertyResponse, PropertyStatus,
    Comment, CommentCreate, CommentResponse,
    convert_scraper_output_to_property
)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="Cape Town Property Discovery API",
    description="Backend API for the property discovery platform with MongoDB",
    version="2.0.0"
)

# Configure CORS for React frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:3000"],  # React dev servers
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize database on startup
@app.on_event("startup")
async def startup_event():
    await init_database()
    await create_indexes()
    logger.info("üöÄ Cape Town Property API with MongoDB started successfully!")

# Cleanup on shutdown
@app.on_event("shutdown")
async def shutdown_event():
    await close_database()
    logger.info("üëã Application shutdown complete")

# Health check endpoint
@app.get("/health")
async def health_check():
    """Check API and database health"""
    db_health = await check_database_health()
    return {
        "status": "healthy",
        "timestamp": datetime.now(),
        "database": db_health
    }

# ============================================================================
# PROPERTY ENDPOINTS
# ============================================================================

@app.get("/api/properties", response_model=List[PropertyResponse])
async def get_properties(
    skip: int = Query(0, ge=0),
    limit: int = Query(50, le=100),
    area: Optional[str] = Query(None),
    status: Optional[PropertyStatus] = Query(None),
    min_price: Optional[int] = Query(None),
    max_price: Optional[int] = Query(None),
    bedrooms: Optional[int] = Query(None),
    search: Optional[str] = Query(None),
):
    """
    Get properties with filtering and pagination
    This endpoint powers your React frontend feed
    """
    try:
        # Build MongoDB query
        query_conditions = {}
        
        if area:
            query_conditions["area"] = {"$regex": area, "$options": "i"}
        
        if status:
            query_conditions["status"] = status
        
        if min_price or max_price:
            price_conditions = {}
            if min_price:
                price_conditions["$gte"] = min_price
            if max_price:
                price_conditions["$lte"] = max_price
            query_conditions["price"] = price_conditions
        
        if bedrooms:
            query_conditions["bedrooms"] = bedrooms
        
        # For search, use MongoDB text search if available, otherwise regex
        if search:
            try:
                # Try text search first (requires text index)
                query_conditions["$text"] = {"$search": search}
            except:
                # Fallback to regex search
                search_regex = {"$regex": search, "$options": "i"}
                query_conditions["$or"] = [
                    {"title": search_regex},
                    {"area": search_regex},
                    {"neighborhood_vibe": search_regex}
                ]
        
        # Execute query with MongoDB
        if query_conditions:
            properties = await Property.find(query_conditions).skip(skip).limit(limit).sort(-Property.scraped_at).to_list()
        else:
            properties = await Property.find_all().skip(skip).limit(limit).sort(-Property.scraped_at).to_list()
        
        # Convert to response models
        return [PropertyResponse.from_property(prop) for prop in properties]
        
    except Exception as e:
        logger.error(f"Error getting properties: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get properties: {str(e)}")

@app.get("/api/properties/{property_id}", response_model=PropertyResponse)
async def get_property(property_id: str):
    """Get a specific property by ID"""
    try:
        property_obj = await Property.get(PydanticObjectId(property_id))
        if not property_obj:
            raise HTTPException(status_code=404, detail="Property not found")
        
        return PropertyResponse.from_property(property_obj)
    except Exception as e:
        logger.error(f"Error getting property {property_id}: {e}")
        raise HTTPException(status_code=404, detail="Property not found")

@app.post("/api/properties", response_model=PropertyResponse)
async def create_property(property_data: PropertyCreate):
    """
    Create a new property
    Used by your scraper to add new properties
    """
    try:
        # Convert Pydantic model to Property document
        property_dict = property_data.dict(exclude_unset=True)
        property_obj = Property(**property_dict)
        
        # Save to MongoDB
        await property_obj.insert()
        
        logger.info(f"‚úÖ Created property: {property_obj.title} in {property_obj.area}")
        return PropertyResponse.from_property(property_obj)
        
    except Exception as e:
        logger.error(f"Error creating property: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to create property: {str(e)}")

@app.put("/api/properties/{property_id}", response_model=PropertyResponse)
async def update_property(property_id: str, property_update: PropertyUpdate):
    """Update property details"""
    try:
        property_obj = await Property.get(PydanticObjectId(property_id))
        if not property_obj:
            raise HTTPException(status_code=404, detail="Property not found")
        
        # Update fields
        update_data = property_update.dict(exclude_unset=True)
        for field, value in update_data.items():
            setattr(property_obj, field, value)
        
        await property_obj.save()
        
        return PropertyResponse.from_property(property_obj)
        
    except Exception as e:
        logger.error(f"Error updating property {property_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to update property: {str(e)}")

# ============================================================================
# SOCIAL FEATURES ENDPOINTS
# ============================================================================

@app.post("/api/properties/{property_id}/view")
async def track_property_view(property_id: str):
    """Track when a property is viewed (for analytics)"""
    try:
        property_obj = await Property.get(PydanticObjectId(property_id))
        if not property_obj:
            raise HTTPException(status_code=404, detail="Property not found")
        
        property_obj.views += 1
        await property_obj.save()
        
        return {"message": "View tracked", "total_views": property_obj.views}
        
    except Exception as e:
        logger.error(f"Error tracking view for property {property_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to track view")

@app.post("/api/properties/{property_id}/like")
async def toggle_property_like(property_id: str):
    """Toggle like on a property"""
    try:
        property_obj = await Property.get(PydanticObjectId(property_id))
        if not property_obj:
            raise HTTPException(status_code=404, detail="Property not found")
        
        # Simple like increment (in real app, you'd track user-specific likes)
        property_obj.likes += 1
        await property_obj.save()
        
        return {"message": "Like added", "total_likes": property_obj.likes}
        
    except Exception as e:
        logger.error(f"Error liking property {property_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to like property")

@app.get("/api/properties/{property_id}/comments", response_model=List[CommentResponse])
async def get_property_comments(property_id: str):
    """Get all comments for a property"""
    try:
        comments = await Comment.find(Comment.property_id == PydanticObjectId(property_id)).sort(-Comment.created_at).to_list()
        return [CommentResponse.from_comment(comment) for comment in comments]
        
    except Exception as e:
        logger.error(f"Error getting comments for property {property_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to get comments")

@app.post("/api/properties/{property_id}/comments", response_model=CommentResponse)
async def add_property_comment(property_id: str, comment_data: CommentCreate):
    """Add a comment to a property"""
    try:
        # Verify property exists
        property_obj = await Property.get(PydanticObjectId(property_id))
        if not property_obj:
            raise HTTPException(status_code=404, detail="Property not found")
        
        # Create comment
        comment = Comment(
            property_id=PydanticObjectId(property_id),
            user_name=comment_data.user_name,
            user_avatar=comment_data.user_avatar,
            text=comment_data.text
        )
        
        await comment.insert()
        
        return CommentResponse.from_comment(comment)
        
    except Exception as e:
        logger.error(f"Error adding comment to property {property_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to add comment")

@app.post("/api/comments/{comment_id}/like")
async def like_comment(comment_id: str):
    """Like a comment"""
    try:
        comment = await Comment.get(PydanticObjectId(comment_id))
        if not comment:
            raise HTTPException(status_code=404, detail="Comment not found")
        
        comment.likes += 1
        await comment.save()
        
        return {"message": "Comment liked", "total_likes": comment.likes}
        
    except Exception as e:
        logger.error(f"Error liking comment {comment_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to like comment")

# ============================================================================
# SCRAPER INTEGRATION ENDPOINTS
# ============================================================================

@app.post("/api/scraper/import")
async def import_scraper_data(
    scraped_properties: List[dict], 
    background_tasks: BackgroundTasks
):
    """
    Import data from your Property24 scraper
    
    Expected format:
    [
        {
            "title": "2 Bedroom Apartment",
            "area": "Sea Point",
            "price": 1200000,
            "bedrooms": 2,
            "bathrooms": 2,
            "size_sqm": 85,
            "type": "Apartment",
            "url": "https://property24.com/...",
            "selector_used": "div.listing_tile"
        },
        ...
    ]
    """
    
    processed_count = 0
    error_count = 0
    
    for scraper_data in scraped_properties:
        try:
            # Convert scraper format to our PropertyCreate model
            property_create = convert_scraper_output_to_property(scraper_data)
            
            # Check if property already exists (by URL)
            existing = None
            if property_create.url:
                existing = await Property.find_one(Property.url == property_create.url)
            
            if not existing:
                # Create new property
                property_dict = property_create.dict(exclude_unset=True)
                property_obj = Property(**property_dict)
                await property_obj.insert()
                processed_count += 1
            else:
                # Update existing property price/details if changed
                if existing.price != property_create.price:
                    existing.price = property_create.price
                    existing.scraped_at = datetime.now()
                    await existing.save()
                
        except Exception as e:
            logger.error(f"Error processing property: {e}")
            error_count += 1
            continue
    
    logger.info(f"‚úÖ Imported {processed_count} properties, {error_count} errors")
    
    total_properties = await Property.count()
    
    return {
        "message": "Import completed",
        "processed": processed_count,
        "errors": error_count,
        "total_properties": total_properties
    }

@app.get("/api/scraper/stats")
async def get_scraper_stats():
    """Get scraping statistics"""
    try:
        total_properties = await Property.count()
        
        # Properties by area (aggregation)
        area_pipeline = [
            {"$group": {"_id": "$area", "count": {"$sum": 1}}},
            {"$sort": {"count": -1}}
        ]
        area_stats = await Property.aggregate(area_pipeline).to_list(length=None)
        
        # Recent scraping activity
        recent_cutoff = datetime.now() - timedelta(days=7)
        recent_scrapes = await Property.find(Property.scraped_at >= recent_cutoff).count()
        
        # Status distribution
        status_pipeline = [
            {"$group": {"_id": "$status", "count": {"$sum": 1}}}
        ]
        status_stats = await Property.aggregate(status_pipeline).to_list(length=None)
        
        # Latest scrape
        latest_property = await Property.find().sort(-Property.scraped_at).first_or_none()
        
        return {
            "total_properties": total_properties,
            "recent_scrapes_7d": recent_scrapes,
            "properties_by_area": {stat["_id"]: stat["count"] for stat in area_stats},
            "properties_by_status": {stat["_id"]: stat["count"] for stat in status_stats},
            "last_scrape": latest_property.scraped_at if latest_property else None
        }
        
    except Exception as e:
        logger.error(f"Error getting scraper stats: {e}")
        raise HTTPException(status_code=500, detail="Failed to get stats")

# ============================================================================
# ANALYTICS ENDPOINTS
# ============================================================================

@app.get("/api/analytics/market")
async def get_market_analytics(area: Optional[str] = None):
    """
    Get market analytics - perfect for your actuarial background!
    """
    try:
        # Build query
        query = {}
        if area:
            query["area"] = {"$regex": area, "$options": "i"}
        
        properties = await Property.find(query).to_list()
        
        if not properties:
            return {"message": "No data available"}
        
        # Calculate statistics
        prices = [p.price for p in properties if p.price]
        price_per_sqm = [p.price_per_sqm for p in properties if p.price_per_sqm]
        
        analytics = {
            "total_properties": len(properties),
            "price_stats": {},
            "price_per_sqm_stats": {},
            "property_types": {},
            "bedroom_distribution": {}
        }
        
        # Price statistics
        if prices:
            sorted_prices = sorted(prices)
            analytics["price_stats"] = {
                "median": sorted_prices[len(sorted_prices)//2],
                "mean": sum(prices) / len(prices),
                "min": min(prices),
                "max": max(prices)
            }
        
        # Price per sqm statistics
        if price_per_sqm:
            sorted_psqm = sorted(price_per_sqm)
            analytics["price_per_sqm_stats"] = {
                "median": sorted_psqm[len(sorted_psqm)//2],
                "mean": sum(price_per_sqm) / len(price_per_sqm)
            }
        
        # Property type distribution
        for prop in properties:
            prop_type = prop.property_type
            analytics["property_types"][prop_type] = analytics["property_types"].get(prop_type, 0) + 1
        
        # Bedroom distribution
        for prop in properties:
            bedrooms = prop.bedrooms or 0
            analytics["bedroom_distribution"][bedrooms] = analytics["bedroom_distribution"].get(bedrooms, 0) + 1
        
        return analytics
        
    except Exception as e:
        logger.error(f"Error getting market analytics: {e}")
        raise HTTPException(status_code=500, detail="Failed to get analytics")

# ============================================================================
# UTILITY ENDPOINTS
# ============================================================================

@app.get("/api/areas")
async def get_areas():
    """Get all available areas with property counts"""
    try:
        pipeline = [
            {"$group": {"_id": "$area", "count": {"$sum": 1}}},
            {"$sort": {"count": -1}}
        ]
        
        areas = await Property.aggregate(pipeline).to_list(length=None)
        return [{"area": area["_id"], "property_count": area["count"]} for area in areas]
        
    except Exception as e:
        logger.error(f"Error getting areas: {e}")
        raise HTTPException(status_code=500, detail="Failed to get areas")
    
@app.delete("/api/properties/cleanup")
async def cleanup_database(
    area: Optional[str] = Query(None),
    older_than_days: Optional[int] = Query(None)
):
    """
    Clean up properties from database
    
    Query params:
    - area: Clean only specific area
    - older_than_days: Clean properties older than X days
    """
    try:
        if area:
            # Delete by area
            result = await Property.find(Property.area == area).delete()
            return {"message": f"Deleted properties from {area}", "deleted": result.deleted_count}
        
        elif older_than_days:
            # Delete old properties
            cutoff = datetime.now() - timedelta(days=older_than_days)
            result = await Property.find(Property.scraped_at < cutoff).delete()
            return {"message": f"Deleted properties older than {older_than_days} days", 
                    "deleted": result.deleted_count}
        
        else:
            # Delete ALL (dangerous!)
            result = await Property.delete_all()
            await Comment.delete_all()  # Also clean comments
            return {"message": "Deleted ALL properties and comments", 
                    "deleted": result.deleted_count}
                    
    except Exception as e:
        logger.error(f"Cleanup error: {e}")
        raise HTTPException(status_code=500, detail="Cleanup failed")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)

================================================================================

File: scraped_backup_20250711_230001.json
--------------------------------------------------------------------------------
[
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 6195300,
    "bedrooms": 2,
    "size_sqm": 85,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/113548960?plId=2078886&plt=2&plsIds=2106649",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/346622081/Crop525x350",
      "https://images.prop24.com/354748341/Ensure450x261",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "Development",
    "area": "sea-point",
    "property_type": "Development",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/356237996/Crop690x220"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 6195300,
    "bedrooms": 2,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "price": 10600000,
    "bedrooms": 3,
    "size_sqm": 179,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116055816?plId=2086362&plt=3&plsIds=2113768",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/216111620/Ensure528x153",
      "https://images.prop24.com/358558736/Crop526x328",
      "https://images.prop24.com/358558737/Crop526x328",
      "https://images.prop24.com/358558738/Crop526x328",
      "https://images.prop24.com/358558739/Crop526x328"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "price": 10600000,
    "bedrooms": 3,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 7500000,
    "bedrooms": 2,
    "size_sqm": 85,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116107794?plId=2086358&plt=3&plsIds=2113765",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/216111620/Ensure528x153",
      "https://images.prop24.com/357248079/Crop526x328",
      "https://images.prop24.com/359421958/Crop526x328",
      "https://images.prop24.com/359421959/Crop526x328",
      "https://images.prop24.com/357248035/Crop526x328"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 7500000,
    "bedrooms": 2,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom House",
    "area": "sea-point",
    "price": 10000000,
    "bedrooms": 3,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116161357?plId=2086214&plt=3&plsIds=2113638",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/309683781/Ensure528x153",
      "https://images.prop24.com/360356564/Crop526x328",
      "https://images.prop24.com/360356566/Crop526x328",
      "https://images.prop24.com/360356567/Crop526x328",
      "https://images.prop24.com/360356544/Crop526x328"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 9850000,
    "bedrooms": 2,
    "size_sqm": 99,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116181091?plId=2085917&plt=3&plsIds=2113356",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/188782398/Ensure264x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 9850000,
    "bedrooms": 2,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 5300000,
    "bedrooms": 2,
    "size_sqm": 129,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116101986?plId=2085884&plt=3&plsIds=2113317",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/214224591/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 5300000,
    "bedrooms": 2,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "price": 9450000,
    "bedrooms": 3,
    "size_sqm": 155,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/115971474?plId=2085886&plt=3&plsIds=2113319",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/214224591/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "price": 9450000,
    "bedrooms": 3,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 7800000,
    "bedrooms": 2,
    "size_sqm": 92,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116161935?plId=2085850&plt=3&plsIds=2113283",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/354748280/Ensure264x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 7800000,
    "bedrooms": 2,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "Apartment",
    "area": "sea-point",
    "price": 2995000,
    "size_sqm": 32,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116154749?plId=2085853&plt=3&plsIds=2113287",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/354748280/Ensure264x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "Apartment",
    "area": "sea-point",
    "price": 2995000,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 12900000,
    "bedrooms": 2,
    "size_sqm": 111,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116035881?plId=2085806&plt=3&plsIds=2113239",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/305274002/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 12900000,
    "bedrooms": 2,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "price": 17950000,
    "bedrooms": 3,
    "size_sqm": 131,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/115955408?plId=2081059&plt=3&plsIds=2108665",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/277408382/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "price": 17950000,
    "bedrooms": 3,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 7400000,
    "bedrooms": 2,
    "size_sqm": 97,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/115900414?plId=2079193&plt=3&plsIds=2106905",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/214224591/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 7400000,
    "bedrooms": 2,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "price": 27500000,
    "bedrooms": 3,
    "size_sqm": 396,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/109775783",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/202882836/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Sea Views"
    ]
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "sea-point",
    "price": 3000000,
    "bedrooms": 1,
    "size_sqm": 63,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116172774",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/329458126/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom Apartment",
    "area": "sea-point",
    "price": 3195000,
    "bedrooms": 5,
    "size_sqm": 38,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116172872",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/188782398/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "sea-point",
    "price": 2650000,
    "bedrooms": 1,
    "size_sqm": 54,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116120682",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/341773167/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom Apartment",
    "area": "sea-point",
    "price": 3950000,
    "bedrooms": 5,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116188921?plId=2085039&plt=4&plsIds=2112481",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/345067931/Ensure528x153",
      "https://images.prop24.com/359526824/Crop204x306",
      "https://www.property24.com/blank.gif"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 5990000,
    "bedrooms": 2,
    "bathrooms": 2,
    "size_sqm": 137,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116174884",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/188189700/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 5200000,
    "bedrooms": 2,
    "size_sqm": 89,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116184401",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom Apartment",
    "area": "sea-point",
    "price": 19000000,
    "bedrooms": 4,
    "size_sqm": 270,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116060348",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "Apartment",
    "area": "sea-point",
    "price": 3450000,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/356237996/Crop690x220"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 4100000,
    "bedrooms": 2,
    "size_sqm": 73,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/foreshore/cape-town/western-cape/9143/115239591?plId=2084817&plt=2&plsIds=2112280",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/346344321/Crop525x350",
      "https://images.prop24.com/344946448/Ensure450x261",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "Development",
    "area": "sea-point",
    "property_type": "Development",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/360268305/Crop690x220"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 4100000,
    "bedrooms": 2,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "5 Bedroom Apartment",
    "area": "sea-point",
    "price": 2350000,
    "bedrooms": 5,
    "size_sqm": 23,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116173602",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/360451463/Crop600x400",
      "https://images.prop24.com/188782398/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "sea-point",
    "price": 2395000,
    "bedrooms": 1,
    "size_sqm": 25,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116193262",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/360901883/Crop600x400",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Furnished"
    ]
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "sea-point",
    "price": 3150000,
    "bedrooms": 1,
    "size_sqm": 52,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116186722",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/323718448/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Balcony"
    ]
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 4000000,
    "bedrooms": 2,
    "size_sqm": 89,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116125830",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/233852929/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "sea-point",
    "price": 2550000,
    "bedrooms": 1,
    "size_sqm": 53,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116136898",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/341773167/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom Apartment",
    "area": "sea-point",
    "price": 2895000,
    "bedrooms": 5,
    "size_sqm": 37,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116172421",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/188782398/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom House",
    "area": "sea-point",
    "price": 7995000,
    "bedrooms": 2,
    "size_sqm": 179,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116169462",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": [
      "Balcony"
    ]
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 7995000,
    "bedrooms": 2,
    "bathrooms": 2,
    "size_sqm": 120,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116169647",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Parking"
    ]
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "price": 12995000,
    "bedrooms": 3,
    "size_sqm": 155,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116143366",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305638802/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom Apartment",
    "area": "sea-point",
    "price": 4900000,
    "bedrooms": 5,
    "size_sqm": 95,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116154487",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Listing/listed_by_owner.png?z=ff268991a6618313cc39",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Sea Views"
    ]
  },
  {
    "title": "5 Bedroom Apartment",
    "area": "sea-point",
    "price": 2095000,
    "bedrooms": 5,
    "size_sqm": 23,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116166950",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/188782398/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "sea-point",
    "price": 4500000,
    "bedrooms": 1,
    "size_sqm": 88,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/113666711",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "sea-point",
    "price": 22750000,
    "bedrooms": 3,
    "size_sqm": 308,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116154434",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/72874115/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 3950000,
    "bedrooms": 2,
    "size_sqm": 87,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116179805",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/341773167/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom Apartment",
    "area": "sea-point",
    "price": 2595000,
    "bedrooms": 5,
    "size_sqm": 25,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116187825",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/354910848/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Furnished"
    ]
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "sea-point",
    "price": 5000000,
    "bedrooms": 2,
    "size_sqm": 92,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116157653",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/281704315/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "Apartment",
    "area": "sea-point",
    "price": 1895000,
    "size_sqm": 26,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116146637",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Garden"
    ]
  },
  {
    "title": "Apartment",
    "area": "sea-point",
    "price": 3100000,
    "size_sqm": 32,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/sea-point/cape-town/western-cape/11021/116173330",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/354748280/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "Apartment",
    "area": "sea-point",
    "price": 10750000,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/360268305/Crop690x220"
    ],
    "highlights": []
  },
  {
    "title": "6 Bedroom House",
    "area": "camps-bay",
    "price": 34995000,
    "bedrooms": 6,
    "size_sqm": 595,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115161103?plId=2082982&plt=2&plsIds=2110407",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/346086585/Crop525x350",
      "https://images.prop24.com/213778188/Ensure450x261",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "Development",
    "area": "camps-bay",
    "property_type": "Development",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/355491390/Crop690x220"
    ],
    "highlights": []
  },
  {
    "title": "6 Bedroom House",
    "area": "camps-bay",
    "price": 34995000,
    "bedrooms": 6,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom House",
    "area": "camps-bay",
    "price": 13995000,
    "bedrooms": 3,
    "size_sqm": 403,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115657752?plId=2086328&plt=3&plsIds=2113735",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/216111620/Ensure528x153",
      "https://images.prop24.com/352359319/Crop526x328",
      "https://images.prop24.com/352359303/Crop526x328",
      "https://images.prop24.com/352359277/Crop526x328",
      "https://images.prop24.com/352359278/Crop526x328"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom House",
    "area": "camps-bay",
    "price": 13995000,
    "bedrooms": 3,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "7 Bedroom House",
    "area": "camps-bay",
    "price": 45000000,
    "bedrooms": 7,
    "size_sqm": 898,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/114205470?plId=2086330&plt=3&plsIds=2113736",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/216111620/Ensure528x153",
      "https://images.prop24.com/330037814/Crop526x328",
      "https://images.prop24.com/330037813/Crop526x328",
      "https://images.prop24.com/330037815/Crop526x328",
      "https://images.prop24.com/330037816/Crop526x328"
    ],
    "highlights": []
  },
  {
    "title": "7 Bedroom House",
    "area": "camps-bay",
    "price": 45000000,
    "bedrooms": 7,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 69000000,
    "bedrooms": 4,
    "size_sqm": 818,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/112061285?plId=2086331&plt=3&plsIds=2113738",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/216111620/Ensure528x153",
      "https://images.prop24.com/296485384/Crop526x328",
      "https://images.prop24.com/355812512/Crop526x328",
      "https://images.prop24.com/355812513/Crop526x328",
      "https://images.prop24.com/355812514/Crop526x328"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 69000000,
    "bedrooms": 4,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "12 Bedroom House",
    "area": "camps-bay",
    "price": 19900000,
    "bedrooms": 12,
    "size_sqm": 595,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116027353?plId=2084982&plt=3&plsIds=2112427",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/354748280/Ensure264x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "12 Bedroom House",
    "area": "camps-bay",
    "price": 19900000,
    "bedrooms": 12,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "7 Bedroom House",
    "area": "camps-bay",
    "price": 32500000,
    "bedrooms": 7,
    "size_sqm": 524,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115437552?plId=2081714&plt=3&plsIds=2109215",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/305274002/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "7 Bedroom House",
    "area": "camps-bay",
    "price": 32500000,
    "bedrooms": 7,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "camps-bay",
    "price": 28750000,
    "bedrooms": 3,
    "size_sqm": 222,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116131395?plId=2081063&plt=3&plsIds=2108673",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/277408382/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "camps-bay",
    "price": 28750000,
    "bedrooms": 3,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "camps-bay",
    "price": 15995000,
    "bedrooms": 3,
    "size_sqm": 144,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115987777?plId=2081061&plt=3&plsIds=2108667",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/277408382/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "camps-bay",
    "price": 15995000,
    "bedrooms": 3,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 39950000,
    "bedrooms": 4,
    "size_sqm": 304,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115931780?plId=2081051&plt=3&plsIds=2108658",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/305274002/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 39950000,
    "bedrooms": 4,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "5 Bedroom House",
    "area": "camps-bay",
    "price": 18000000,
    "bedrooms": 5,
    "size_sqm": 669,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116112234?plId=2080429&plt=3&plsIds=2108065",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/242461179/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom House",
    "area": "camps-bay",
    "price": 18000000,
    "bedrooms": 5,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "5 Bedroom House",
    "area": "camps-bay",
    "price": 16850000,
    "bedrooms": 5,
    "size_sqm": 595,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115510023?plId=2080407&plt=3&plsIds=2108046",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/242461179/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom House",
    "area": "camps-bay",
    "price": 16850000,
    "bedrooms": 5,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 26900000,
    "bedrooms": 4,
    "size_sqm": 254,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115851489?plId=2078366&plt=3&plsIds=2106124",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/305274002/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 26900000,
    "bedrooms": 4,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "5 Bedroom House",
    "area": "camps-bay",
    "price": 15995000,
    "bedrooms": 5,
    "size_sqm": 120,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116130163?plId=2067227&plt=4&plsIds=2095718",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/213885973/Ensure528x153",
      "https://images.prop24.com/358756416/Crop204x306",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": [
      "Mountain Views"
    ]
  },
  {
    "title": "6 Bedroom House",
    "area": "camps-bay",
    "price": 39999990,
    "bedrooms": 6,
    "size_sqm": 126,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116161536",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/341773167/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 16200000,
    "bedrooms": 4,
    "size_sqm": 778,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116184727",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "Property",
    "area": "camps-bay",
    "price": 14995000,
    "size_sqm": 719,
    "property_type": "Property",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116166026",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/206466645/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": [
      "Sea Views"
    ]
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "camps-bay",
    "price": 23500000,
    "bedrooms": 3,
    "size_sqm": 399,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115926370",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/318662228/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "11 Bedroom House",
    "area": "camps-bay",
    "price": 42950000,
    "bedrooms": 11,
    "size_sqm": 860,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/114679429",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/340146631/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom House",
    "area": "camps-bay",
    "price": 21500000,
    "bedrooms": 3,
    "size_sqm": 795,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/111433372",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "camps-bay",
    "price": 19999000,
    "bedrooms": 3,
    "size_sqm": 380,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116169715",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/276704044/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "7 Bedroom House",
    "area": "camps-bay",
    "price": 18950000,
    "bedrooms": 7,
    "size_sqm": 820,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116123469",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "House",
    "area": "camps-bay",
    "price": 26500000,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/355491390/Crop690x220",
      "https://images.prop24.com/354748280/Ensure264x153",
      "https://images.prop24.com/355491389/Fit306x153"
    ],
    "highlights": []
  },
  {
    "title": "Property",
    "area": "camps-bay",
    "price": 14995000,
    "size_sqm": 719,
    "property_type": "Property",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116166026?plId=2082976&plt=2&plsIds=2110400",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/360434749/Crop525x350",
      "https://images.prop24.com/213778188/Ensure450x261",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "Development",
    "area": "camps-bay",
    "property_type": "Development",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/355491390/Crop690x220"
    ],
    "highlights": []
  },
  {
    "title": "Property",
    "area": "camps-bay",
    "price": 14995000,
    "property_type": "Property",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom House",
    "area": "camps-bay",
    "price": 20999999,
    "bedrooms": 3,
    "size_sqm": 166,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116023841",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/358601725/Crop600x400",
      "https://images.prop24.com/281704315/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Furnished"
    ]
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 69000000,
    "bedrooms": 4,
    "size_sqm": 817,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116091075",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/359150921/Crop600x400",
      "https://images.prop24.com/309683600/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "camps-bay",
    "price": 4800000,
    "bedrooms": 1,
    "size_sqm": 77,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115833192",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/354945960/Crop600x400",
      "https://images.prop24.com/318662228/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "12 Bedroom House",
    "area": "camps-bay",
    "price": 19900000,
    "bedrooms": 12,
    "size_sqm": 595,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/114724650",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/72874115/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "camps-bay",
    "price": 5500000,
    "bedrooms": 1,
    "size_sqm": 89,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115931113",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/103291119/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 36000000,
    "bedrooms": 4,
    "size_sqm": 43,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116101808",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/242461081/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": [
      "Mountain Views"
    ]
  },
  {
    "title": "5 Bedroom House",
    "area": "camps-bay",
    "price": 15000000,
    "bedrooms": 5,
    "size_sqm": 752,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115783554",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/103291119/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "camps-bay",
    "price": 9999000,
    "bedrooms": 1,
    "size_sqm": 120,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116089407",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/276704044/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom House",
    "area": "camps-bay",
    "price": 18000000,
    "bedrooms": 5,
    "size_sqm": 689,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/116098332",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/230639607/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": [
      "Furnished"
    ]
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 34000000,
    "bedrooms": 4,
    "size_sqm": 706,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115547197",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305638802/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom House",
    "area": "camps-bay",
    "price": 13995000,
    "bedrooms": 3,
    "size_sqm": 403,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/113337456",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/277408281/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 21950000,
    "bedrooms": 4,
    "size_sqm": 495,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115858518",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/234925090/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 29900000,
    "bedrooms": 4,
    "size_sqm": 2,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115873052",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/242461081/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "Property",
    "area": "camps-bay",
    "price": 50000000,
    "size_sqm": 883,
    "property_type": "Property",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115732656",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Listing/listed_by_owner.png?z=ff268991a6618313cc39",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 27500000,
    "bedrooms": 4,
    "size_sqm": 959,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115978385",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/276704044/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "6 Bedroom House",
    "area": "camps-bay",
    "price": 21495000,
    "bedrooms": 6,
    "size_sqm": 787,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115952096",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/242461081/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "6 Bedroom House",
    "area": "camps-bay",
    "price": 64999000,
    "bedrooms": 6,
    "size_sqm": 156,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115270350",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/342439099/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 26900000,
    "bedrooms": 4,
    "size_sqm": 963,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115853458",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/206466645/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": [
      "Sea Views"
    ]
  },
  {
    "title": "4 Bedroom House",
    "area": "camps-bay",
    "price": 12995000,
    "bedrooms": 4,
    "size_sqm": 184,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/camps-bay/cape-town/western-cape/11014/115871881",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/206466645/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "House",
    "area": "camps-bay",
    "price": 26500000,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/355491390/Crop690x220",
      "https://images.prop24.com/354748280/Ensure264x153",
      "https://images.prop24.com/355491389/Fit306x153"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 4100000,
    "bedrooms": 2,
    "size_sqm": 73,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/foreshore/cape-town/western-cape/9143/115239591?plId=2084817&plt=2&plsIds=2112281",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/346344321/Crop525x350",
      "https://images.prop24.com/344946448/Ensure450x261",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "Development",
    "area": "green-point",
    "property_type": "Development",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/356334882/Crop690x220"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 4100000,
    "bedrooms": 2,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 7400000,
    "bedrooms": 2,
    "size_sqm": 93,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/114122633?plId=2085885&plt=3&plsIds=2113318",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/214224591/Ensure528x153",
      "https://images.prop24.com/348114979/Crop526x328",
      "https://images.prop24.com/348114977/Crop526x328",
      "https://images.prop24.com/348114978/Crop526x328",
      "https://images.prop24.com/348114980/Crop526x328"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 7400000,
    "bedrooms": 2,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "green-point",
    "price": 14250000,
    "bedrooms": 3,
    "size_sqm": 150,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116188389?plId=2085888&plt=3&plsIds=2113322",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/214224591/Ensure528x153",
      "https://images.prop24.com/356039128/Crop526x328",
      "https://images.prop24.com/356039123/Crop526x328",
      "https://images.prop24.com/356039127/Crop526x328",
      "https://images.prop24.com/356039124/Crop526x328"
    ],
    "highlights": [
      "Sea Views"
    ]
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "green-point",
    "price": 14250000,
    "bedrooms": 3,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom House",
    "area": "green-point",
    "price": 10500000,
    "bedrooms": 3,
    "size_sqm": 246,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116119899?plId=2078482&plt=3&plsIds=2106278",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/297664839/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom House",
    "area": "green-point",
    "price": 10500000,
    "bedrooms": 3,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "green-point",
    "price": 13990000,
    "bedrooms": 3,
    "size_sqm": 207,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115904493?plId=2085889&plt=3&plsIds=2113323",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/214224591/Ensure528x153",
      "https://images.prop24.com/356039122/Crop526x328",
      "https://images.prop24.com/356039123/Crop526x328",
      "https://images.prop24.com/356039124/Crop526x328",
      "https://images.prop24.com/356039125/Crop526x328"
    ],
    "highlights": [
      "Sea Views"
    ]
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "green-point",
    "price": 13990000,
    "bedrooms": 3,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "Property",
    "area": "green-point",
    "price": 26950000,
    "size_sqm": 349,
    "property_type": "Property",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/113779344?plId=2081403&plt=3&plsIds=2108961",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/304740497/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "Property",
    "area": "green-point",
    "price": 26950000,
    "property_type": "Property",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "5 Bedroom House",
    "area": "green-point",
    "price": 17950000,
    "bedrooms": 5,
    "size_sqm": 444,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115536863?plId=2078480&plt=3&plsIds=2106274",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/297664839/Ensure528x153",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom House",
    "area": "green-point",
    "price": 17950000,
    "bedrooms": 5,
    "property_type": "House",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 4250000,
    "bedrooms": 2,
    "size_sqm": 95,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116162451?plId=2086551&plt=4&plsIds=2113947",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/315145434/Ensure528x153",
      "https://images.prop24.com/304541179/Crop204x306",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Parking",
      "Balcony"
    ]
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 4950000,
    "bedrooms": 2,
    "size_sqm": 82,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116059401",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/103291119/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom House",
    "area": "green-point",
    "price": 13500000,
    "bedrooms": 5,
    "size_sqm": 505,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116190239",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/206466645/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 5995000,
    "bedrooms": 2,
    "size_sqm": 126,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116111198",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/318662228/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "green-point",
    "price": 10500000,
    "bedrooms": 4,
    "size_sqm": 246,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116165254",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305638802/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "Apartment",
    "area": "green-point",
    "price": 1800000,
    "size_sqm": 20,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115748956?plId=2077416&plt=4&plsIds=2105203",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/214301327/Ensure528x153",
      "https://images.prop24.com/359536942/Crop204x306",
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "green-point",
    "price": 3200000,
    "bedrooms": 1,
    "size_sqm": 67,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115988722",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/344062982/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Balcony"
    ]
  },
  {
    "title": "4 Bedroom House",
    "area": "green-point",
    "price": 7695000,
    "bedrooms": 4,
    "size_sqm": 335,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/113796643",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/341773167/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 7500000,
    "bedrooms": 2,
    "size_sqm": 125,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116048133",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/268912312/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom House",
    "area": "green-point",
    "price": 5995000,
    "bedrooms": 2,
    "size_sqm": 133,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116159420",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 5295000,
    "bedrooms": 2,
    "size_sqm": 78,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116184758",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/309683600/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Furnished"
    ]
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 4195000,
    "bedrooms": 2,
    "size_sqm": 190,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116104608",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/206466645/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Garden"
    ]
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 3995000,
    "bedrooms": 2,
    "size_sqm": 84,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116014037",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://www.property24.com/Content/images/Optimized/Listing/listed_by_owner.png?z=ff268991a6618313cc39",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 5995000,
    "bedrooms": 2,
    "size_sqm": 81,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116114901",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/233852929/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Garden"
    ]
  },
  {
    "title": "Apartment",
    "area": "green-point",
    "price": 13490000,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/356334882/Crop690x220"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom Apartment",
    "area": "green-point",
    "price": 33500000,
    "bedrooms": 4,
    "size_sqm": 545,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116106858?plId=2082960&plt=2&plsIds=2110385",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/359869800/Crop525x350",
      "https://images.prop24.com/213778188/Ensure450x261",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "Development",
    "area": "green-point",
    "property_type": "Development",
    "selector_used": "div[class*=\"listing\"]",
    "images": [
      "https://images.prop24.com/358725747/Crop690x220"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom Apartment",
    "area": "green-point",
    "price": 33500000,
    "bedrooms": 4,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "green-point",
    "price": 3995000,
    "bedrooms": 1,
    "size_sqm": 47,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116159307",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/360317914/Crop600x400",
      "https://images.prop24.com/309683600/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "4 Bedroom House",
    "area": "green-point",
    "price": 7500000,
    "bedrooms": 4,
    "size_sqm": 384,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116130337",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/359815875/Crop600x400",
      "https://images.prop24.com/269018999/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "5 Bedroom Apartment",
    "area": "green-point",
    "price": 2850000,
    "bedrooms": 5,
    "size_sqm": 41,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116094501",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/359211493/Crop600x400",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Furnished"
    ]
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 14750000,
    "bedrooms": 2,
    "size_sqm": 145,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116090747",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/269018999/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 7000000,
    "bedrooms": 2,
    "size_sqm": 119,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115962831",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/72874115/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "green-point",
    "price": 2950000,
    "bedrooms": 1,
    "size_sqm": 44,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116085926",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "Apartment",
    "area": "green-point",
    "price": 2650000,
    "size_sqm": 40,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116121499",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 4500000,
    "bedrooms": 2,
    "size_sqm": 118,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115883747",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/225270000/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "green-point",
    "price": 6750000,
    "bedrooms": 3,
    "bathrooms": 3,
    "size_sqm": 104,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116015864",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/242461081/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Garden"
    ]
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 3495000,
    "bedrooms": 2,
    "size_sqm": 82,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116077121",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/180501115/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "green-point",
    "price": 3450000,
    "bedrooms": 1,
    "bathrooms": 1,
    "size_sqm": 76,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116087012",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/166374785/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Parking"
    ]
  },
  {
    "title": "3 Bedroom Apartment",
    "area": "green-point",
    "price": 31625000,
    "bedrooms": 3,
    "size_sqm": 366,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116070369",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [],
    "neighborhood_vibe": "Walking distance to amenities"
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 3650000,
    "bedrooms": 2,
    "size_sqm": 63,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116075377",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/323718448/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 4600000,
    "bedrooms": 2,
    "size_sqm": 84,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116099667",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/305273954/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "green-point",
    "price": 3400000,
    "bedrooms": 1,
    "size_sqm": 70,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/109638183",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/221043308/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": [
      "Garden"
    ],
    "neighborhood_vibe": "Walking distance to amenities"
  },
  {
    "title": "5 Bedroom House",
    "area": "green-point",
    "price": 22000000,
    "bedrooms": 5,
    "size_sqm": 605,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/116026418",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/269018999/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "2 Bedroom Apartment",
    "area": "green-point",
    "price": 11000000,
    "bedrooms": 2,
    "size_sqm": 195,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115999313",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/322138770/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "1 Bedroom Apartment",
    "area": "green-point",
    "price": 3295000,
    "bedrooms": 1,
    "size_sqm": 49,
    "property_type": "Apartment",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115988115",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/323718448/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_floor_new.svg?z=6469c3498bc6c7f3625f"
    ],
    "highlights": []
  },
  {
    "title": "3 Bedroom House",
    "area": "green-point",
    "price": 9950000,
    "bedrooms": 3,
    "size_sqm": 350,
    "property_type": "House",
    "url": "https://www.property24.com/for-sale/green-point/cape-town/western-cape/11017/115825266",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://www.property24.com/blank.gif",
      "https://images.prop24.com/206466645/Ensure264x153",
      "https://www.property24.com/Content/images/Optimized/Icons/icon_erf_new.svg?z=39eb1f3e5c6b14ca6543"
    ],
    "highlights": []
  },
  {
    "title": "Apartment",
    "area": "green-point",
    "price": 5500000,
    "property_type": "Apartment",
    "selector_used": "div[class*=\"p24_\"]",
    "images": [
      "https://images.prop24.com/358725747/Crop690x220"
    ],
    "highlights": []
  }
]

================================================================================

File: scraper/scraper.py
--------------------------------------------------------------------------------
"""
Property24 Web Scraper - Enhanced Version with Image Extraction
Combines the working pagination scraper with image extraction capabilities
"""

import requests
from bs4 import BeautifulSoup
import re
import time
import pandas as pd
import json
from typing import List, Dict, Optional
from datetime import datetime
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Property24 Area Codes
PROPERTY24_AREA_CODES = {
    "sea-point": 11021,
    "green-point": 11017,
    "camps-bay": 11014,
    "clifton": 11015,
    "fresnaye": 11016,
    "mouille-point": 11018,
    "de-waterkant": 9141,
    "gardens": 9145,
    "oranjezicht": 9155,
    "tamboerskloof": 9163,
    "vredehoek": 9166,
}


class Property24Scraper:
    """
    Enhanced Property24 scraper with image extraction capabilities
    """
    
    def __init__(self, delay_between_requests: float = 1.0):
        self.delay = delay_between_requests
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        })
    
    def extract_property_images(self, element) -> List[str]:
        """
        Extract image URLs from property listing element
        """
        images = []
        
        try:
            # Method 1: Look for img tags with data-src or src
            img_tags = element.find_all('img')
            for img in img_tags:
                # Skip icons and small images
                if 'icon' in str(img.get('class', [])):
                    continue
                
                # Try data-src first (lazy loading), then src
                img_url = img.get('data-src') or img.get('src')
                
                if img_url:
                    # Skip base64 images and placeholders
                    if 'data:image' in img_url or 'placeholder' in img_url:
                        continue
                    
                    # Ensure full URL
                    if not img_url.startswith('http'):
                        img_url = 'https:' + img_url if img_url.startswith('//') else 'https://www.property24.com' + img_url
                    
                    # Check if it's a property image (usually contains certain patterns)
                    if any(pattern in img_url for pattern in ['property24', 'listing', 'property', 'p24']):
                        images.append(img_url)
            
            # Method 2: Look for background images in style attributes
            elements_with_bg = element.find_all(style=re.compile('background-image'))
            for el in elements_with_bg:
                style = el.get('style', '')
                bg_match = re.search(r'url\(["\']?([^"\']+)["\']?\)', style)
                if bg_match:
                    img_url = bg_match.group(1)
                    if not img_url.startswith('http'):
                        img_url = 'https:' + img_url if img_url.startswith('//') else 'https://www.property24.com' + img_url
                    if 'property' in img_url or 'listing' in img_url:
                        images.append(img_url)
            
            # Method 3: Look for gallery data in JSON
            scripts = element.find_all('script', type='application/json')
            for script in scripts:
                try:
                    data = json.loads(script.string)
                    # Property24 often stores images in JSON
                    if isinstance(data, dict):
                        self._extract_images_from_json(data, images)
                except:
                    pass
            
            # Remove duplicates while preserving order
            seen = set()
            unique_images = []
            for img in images:
                if img not in seen:
                    seen.add(img)
                    unique_images.append(img)
            
            return unique_images[:5]  # Limit to 5 images per property
            
        except Exception as e:
            logger.debug(f"Error extracting images: {e}")
            return []
    
    def _extract_images_from_json(self, data: dict, images: list, depth: int = 0):
        """Recursively extract image URLs from JSON data"""
        if depth > 5:  # Prevent too deep recursion
            return
        
        if isinstance(data, dict):
            for key, value in data.items():
                if key in ['images', 'gallery', 'photos', 'imageUrl', 'image']:
                    if isinstance(value, list):
                        for item in value:
                            if isinstance(item, str) and item.startswith('http'):
                                images.append(item)
                            elif isinstance(item, dict) and 'url' in item:
                                images.append(item['url'])
                elif isinstance(value, (dict, list)):
                    self._extract_images_from_json(value, images, depth + 1)
        elif isinstance(data, list):
            for item in data:
                if isinstance(item, dict):
                    self._extract_images_from_json(item, images, depth + 1)
        
    def scrape_area(self, area: str, transaction_type: str = "for-sale", 
                    max_pages: int = None, extract_images: bool = True) -> List[Dict]:
        """
        Scrape all properties from a specific area with pagination
        
        Args:
            area: Area to scrape
            transaction_type: "for-sale" or "to-rent"
            max_pages: Maximum number of pages to scrape
            extract_images: Whether to extract images (adds slight overhead)
        """
        area_normalized = area.lower().replace(" ", "-").replace("_", "-")
        area_code = PROPERTY24_AREA_CODES.get(area_normalized)
        
        if not area_code:
            logger.error(f"Unknown area: {area}")
            return []
        
        all_properties = []
        seen_urls = set()
        page = 1
        consecutive_empty_pages = 0
        
        logger.info(f"Scraping {area} ({transaction_type})")
        
        while True:
            if consecutive_empty_pages >= 2:
                break
                
            if max_pages and page > max_pages:
                break
            
            # Build URL - EXACTLY as in working version
            url = f"https://www.property24.com/{transaction_type}/{area_normalized}/cape-town/western-cape/{area_code}"
            if page > 1:
                url += f"?Page={page}"
            
            logger.info(f"Page {page}: {url}")
            
            try:
                response = self.session.get(url, timeout=15)
                if response.status_code != 200:
                    logger.error(f"Bad status code: {response.status_code}")
                    break
                
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # Extract using the enhanced method
                page_properties = self._extract_all_properties_from_page(soup, area, extract_images)
                
                # Filter duplicates
                new_properties = []
                for prop in page_properties:
                    prop_url = prop.get('url', '')
                    if prop_url and prop_url not in seen_urls:
                        seen_urls.add(prop_url)
                        new_properties.append(prop)
                    elif not prop_url:
                        # Include properties without URLs too
                        new_properties.append(prop)
                
                if new_properties:
                    all_properties.extend(new_properties)
                    logger.info(f"‚úÖ Found {len(new_properties)} new properties")
                    consecutive_empty_pages = 0
                else:
                    logger.warning(f"No new properties on page {page}")
                    consecutive_empty_pages += 1
                
                page += 1
                time.sleep(self.delay)
                
            except Exception as e:
                logger.error(f"Error on page {page}: {str(e)}")
                break
        
        logger.info(f"‚úÖ Total properties found: {len(all_properties)}")
        return all_properties
    
    def _extract_all_properties_from_page(self, soup: BeautifulSoup, area: str, extract_images: bool = True) -> List[Dict]:
        """
        Extract properties using EXACT method from working pagination scraper
        """
        all_properties = []
        seen_prices_and_beds = set()
        
        # EXACT selectors from working version
        selectors = [
            'div[class*="listing"]',
            'div[class*="p24_"]',
            'div[class*="tile"]',
            'div[class*="property"]',
            'article[class*="listing"]',
            'div[class*="result"]',
            '.p24_regularTile',
            '.js_listingTile',
            '[data-listing-number]',
            'div[class*="sc_listingTile"]',
            'div[class*="ListingTile"]',
            'div[class*="propertyTile"]',
            'a[href*="/for-sale/"][href*="plId="]',
        ]
        
        for selector in selectors:
            elements = soup.select(selector)
            
            if elements:
                for element in elements:
                    # Handle link elements - get parent container
                    if element.name == 'a':
                        container = element.parent
                        while container and len(container.get_text()) < 50:
                            container = container.parent
                    else:
                        container = element
                    
                    if container:
                        prop = self._extract_property_data_enhanced(container, extract_images)
                        
                        if prop:
                            # Unique key to avoid duplicates
                            key = (prop.get('price'), prop.get('bedrooms'), prop.get('size_sqm'))
                            if key not in seen_prices_and_beds:
                                seen_prices_and_beds.add(key)
                                prop['area'] = area
                                prop['selector_used'] = selector
                                all_properties.append(prop)
        
        return all_properties
    
    def _extract_property_data_enhanced(self, element, extract_images: bool = True) -> Optional[Dict]:
        """
        Enhanced extraction that includes images and more details
        """
        text = element.get_text(separator=' ', strip=True)
        
        # Skip if too short or too long
        if len(text) < 30 or len(text) > 2000:
            return None
        
        property_data = {}
        
        # Extract price - EXACT patterns that worked
        price_match = re.search(r'R\s*(\d{1,3}(?:[\s,]*\d{3})+)', text)
        if price_match:
            try:
                price_str = price_match.group(1).replace(',', '').replace(' ', '')
                property_data['price'] = int(price_str)
            except:
                pass
        elif 'development' in text.lower():
            property_data['price'] = None
            property_data['type'] = 'Development'
        else:
            return None  # No price, skip
        
        # Extract bedrooms
        bed_match = re.search(r'(\d+)\s*[Bb]ed', text)
        if bed_match:
            property_data['bedrooms'] = int(bed_match.group(1))
        
        # Extract bathrooms
        bath_match = re.search(r'(\d+)\s*[Bb]ath', text)
        if bath_match:
            property_data['bathrooms'] = int(bath_match.group(1))
        
        # Extract size
        size_match = re.search(r'(\d+)\s*m[¬≤2]', text, re.IGNORECASE)
        if size_match:
            property_data['size_sqm'] = int(size_match.group(1))
        
        # Property type
        text_lower = text.lower()
        if 'apartment' in text_lower or 'flat' in text_lower:
            property_data['type'] = 'Apartment'
        elif 'house' in text_lower:
            property_data['type'] = 'House'
        elif 'townhouse' in text_lower:
            property_data['type'] = 'Townhouse'
        else:
            property_data['type'] = property_data.get('type', 'Property')
        
        # Extract URL
        link = element.find('a', href=True)
        if link and '/for-sale/' in link['href']:
            href = link['href']
            property_data['url'] = href if href.startswith('http') else 'https://www.property24.com' + href
        
        # Extract images if requested
        if extract_images:
            images = self.extract_property_images(element)
            if images:
                property_data['images'] = images
                logger.debug(f"Found {len(images)} images for property")
        
        # Extract additional features from text
        features = []
        feature_patterns = [
            (r'pool', 'Pool'),
            (r'garage|parking', 'Parking'),
            (r'garden', 'Garden'),
            (r'security', 'Security'),
            (r'balcony', 'Balcony'),
            (r'pet[\s-]?friendly', 'Pet Friendly'),
            (r'furnished', 'Furnished'),
            (r'sea[\s-]?view|ocean[\s-]?view', 'Sea Views'),
            (r'mountain[\s-]?view', 'Mountain Views')
        ]
        
        for pattern, feature in feature_patterns:
            if re.search(pattern, text_lower):
                features.append(feature)
        
        if features:
            property_data['highlights'] = features
        
        # Create title
        if property_data.get('bedrooms'):
            property_data['title'] = f"{property_data['bedrooms']} Bedroom {property_data['type']}"
        else:
            property_data['title'] = property_data['type']
        
        # Add area description if found
        if 'walking distance' in text_lower:
            property_data['neighborhood_vibe'] = "Walking distance to amenities"
        
        return property_data
    
    def _extract_property_data_simple(self, element) -> Optional[Dict]:
        """
        Simple extraction without images (for backwards compatibility)
        """
        return self._extract_property_data_enhanced(element, extract_images=False)
    
    def scrape_property_details_page(self, url: str) -> Dict:
        """
        Scrape detailed information from individual property page
        This gets much more data including all images
        """
        try:
            logger.info(f"Fetching details from: {url}")
            response = self.session.get(url, timeout=15)
            
            if response.status_code != 200:
                logger.error(f"Failed to fetch property page: {response.status_code}")
                return {}
            
            soup = BeautifulSoup(response.text, 'html.parser')
            details = {}
            
            # Extract all images from gallery
            gallery_images = []
            
            # Method 1: Look for image gallery container
            gallery_container = soup.find('div', class_=re.compile('gallery|carousel|slider|images'))
            if gallery_container:
                images = self.extract_property_images(gallery_container)
                gallery_images.extend(images)
            
            # Method 2: Look for all property images on page
            all_images = soup.find_all('img', src=re.compile('property|listing|p24'))
            for img in all_images:
                src = img.get('src') or img.get('data-src')
                if src and src not in gallery_images:
                    if not src.startswith('http'):
                        src = 'https:' + src if src.startswith('//') else 'https://www.property24.com' + src
                    gallery_images.append(src)
            
            details['images'] = gallery_images[:10]  # Limit to 10 images
            
            # Extract description
            description_el = soup.find('div', class_=re.compile('description|content|details'))
            if description_el:
                details['description'] = description_el.get_text(strip=True)[:500]
            
            return details
            
        except Exception as e:
            logger.error(f"Error scraping property details: {e}")
            return {}
    
    def scrape_multiple_areas(self, areas: List[str], transaction_type: str = "for-sale",
                            max_pages_per_area: int = None, extract_images: bool = True) -> pd.DataFrame:
        """
        Scrape multiple areas with optional image extraction
        """
        all_properties = []
        
        for i, area in enumerate(areas):
            logger.info(f"\nArea {i+1}/{len(areas)}: {area}")
            logger.info("=" * 60)
            
            properties = self.scrape_area(area, transaction_type, max_pages=max_pages_per_area, extract_images=extract_images)
            all_properties.extend(properties)
            
            if i < len(areas) - 1:
                time.sleep(self.delay * 2)
        
        # Convert to DataFrame
        df = pd.DataFrame(all_properties)
        
        if not df.empty and 'price' in df.columns and 'size_sqm' in df.columns:
            df['price_per_sqm'] = df.apply(
                lambda row: row['price'] / row['size_sqm'] 
                if pd.notna(row.get('price')) and pd.notna(row.get('size_sqm')) and row['size_sqm'] > 0 
                else None,
                axis=1
            )
        
        return df
    
    def save_results(self, df: pd.DataFrame, filename: str = None):
        """
        Save results to CSV
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"property24_results_{timestamp}.csv"
        
        df.to_csv(filename, index=False)
        logger.info(f"Saved {len(df)} properties to {filename}")


# Example usage
if __name__ == "__main__":
    scraper = Property24Scraper()
    
    # Scrape with image extraction enabled
    properties = scraper.scrape_area("sea-point", max_pages=1, extract_images=True)
    
    print(f"Total properties found: {len(properties)}")
    
    # Show some sample results
    for prop in properties[:3]:
        price = prop.get('price')
        price_str = f"R{price:,}" if price else "Price on Application"
        
        print(f"\n{prop.get('title', 'Unknown')} - {price_str}")
        print(f"Area: {prop.get('area')}")
        print(f"Images found: {len(prop.get('images', []))}")
        if prop.get('images'):
            print(f"First image: {prop['images'][0]}")
        if prop.get('highlights'):
            print(f"Features: {', '.join(prop['highlights'])}")

================================================================================

File: scraper/property24_integration.py
--------------------------------------------------------------------------------
"""
Integration script to connect your Property24 scraper with images to the backend
This bridges your enhanced scraper with the FastAPI backend
"""

import requests
import json
from datetime import datetime
from typing import List, Dict
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PropertyAPIClient:
    """Client to interact with your Property Discovery API"""
    
    def __init__(self, api_base_url: str = "http://localhost:8000"):
        self.api_base_url = api_base_url.rstrip('/')
        self.session = requests.Session()
    
    def health_check(self) -> bool:
        """Check if the API is running"""
        try:
            response = self.session.get(f"{self.api_base_url}/health")
            return response.status_code == 200
        except Exception as e:
            logger.error(f"API health check failed: {e}")
            return False
    
    def import_properties(self, properties: List[Dict]) -> Dict:
        """
        Import scraped properties to the backend
        
        Args:
            properties: List of property dictionaries from your scraper
            
        Returns:
            Import result with counts and status
        """
        try:
            response = self.session.post(
                f"{self.api_base_url}/api/scraper/import",
                json=properties,
                headers={"Content-Type": "application/json"}
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Failed to import properties: {e}")
            raise

def transform_scraper_output(scraper_property: Dict) -> Dict:
    """
    Transform your scraper output to match the API format
    Now includes image handling
    """
    
    # Transform to API format
    transformed = {
        "title": scraper_property.get("title", "Property"),
        "area": scraper_property.get("area", "Unknown"),
        "price": scraper_property.get("price"),
        "bedrooms": scraper_property.get("bedrooms"),
        "bathrooms": scraper_property.get("bathrooms"), 
        "size_sqm": scraper_property.get("size_sqm"),
        "property_type": scraper_property.get("type", "Property"),
        "url": scraper_property.get("url"),
        "neighborhood_vibe": scraper_property.get("neighborhood_vibe"),
        "selector_used": scraper_property.get("selector_used"),
        
        # Images - ensure it's a list
        "images": scraper_property.get("images", []),
        
        # Highlights from feature extraction
        "highlights": scraper_property.get("highlights", []),
    }
    
    # Validate images are proper URLs
    if transformed["images"]:
        valid_images = []
        for img in transformed["images"]:
            if isinstance(img, str) and (img.startswith("http://") or img.startswith("https://")):
                valid_images.append(img)
        transformed["images"] = valid_images[:5]  # Limit to 5 images
    
    # Remove None values
    return {k: v for k, v in transformed.items() if v is not None}

def run_scraper_and_import_with_images(areas: List[str] = None, max_pages: int = 5, 
                                       extract_images: bool = True, dry_run: bool = False):
    """
    Main function to run your enhanced scraper and import results to the backend
    
    Args:
        areas: List of areas to scrape
        max_pages: Maximum pages per area
        extract_images: Whether to extract images
        dry_run: If True, just prints data without sending to backend
    """
    
    # Import your enhanced scraper
    try:
        # Update this import path to match your project structure
        from scraper import Property24Scraper  
        logger.info("‚úÖ Imported enhanced Property24Scraper")
    except ImportError:
        logger.error("‚ùå Could not import your scraper. Please update the import path.")
        return
    
    # Initialize API client (unless dry run)
    api_client = None
    if not dry_run:
        api_client = PropertyAPIClient()
        
        # Check if backend is running
        if not api_client.health_check():
            logger.error("‚ùå Backend API is not running. Please start it with: uvicorn main:app --reload")
            return
        
        logger.info("‚úÖ Backend API is healthy")
    
    # Initialize your scraper
    scraper = Property24Scraper(delay_between_requests=1.0)
    
    # Default areas if none provided
    if not areas:
        areas = ["sea-point", "camps-bay", "green-point"]
    
    all_properties = []
    
    # Run scraper for each area
    for area in areas:
        logger.info(f"üîç Scraping {area} with image extraction {'enabled' if extract_images else 'disabled'}...")
        
        try:
            # Use enhanced scraper with image extraction
            area_properties = scraper.scrape_area(
                area, 
                max_pages=max_pages, 
                extract_images=extract_images
            )
            
            logger.info(f"üìä Found {len(area_properties)} properties in {area}")
            
            # Log sample property with images
            if area_properties and area_properties[0].get('images'):
                sample = area_properties[0]
                logger.info(f"   Sample: {sample['title']} - {len(sample.get('images', []))} images")
            
            # Transform each property to API format
            transformed_properties = [transform_scraper_output(prop) for prop in area_properties]
            all_properties.extend(transformed_properties)
            
        except Exception as e:
            logger.error(f"‚ùå Error scraping {area}: {e}")
            continue
    
    # Show results
    logger.info(f"\nüìä Total properties scraped: {len(all_properties)}")
    
    # Count properties with images
    properties_with_images = sum(1 for p in all_properties if p.get('images'))
    logger.info(f"üñºÔ∏è  Properties with images: {properties_with_images}/{len(all_properties)}")
    
    if dry_run:
        # Just save to file for inspection
        filename = f"scraped_properties_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w') as f:
            json.dump(all_properties, f, indent=2)
        logger.info(f"üíæ Dry run - saved to {filename}")
        
        # Show sample
        if all_properties:
            logger.info("\nüìÑ Sample property:")
            sample = all_properties[0]
            logger.info(f"   Title: {sample['title']}")
            logger.info(f"   Price: R{sample.get('price', 'N/A'):,}")
            logger.info(f"   Images: {len(sample.get('images', []))}")
            if sample.get('images'):
                logger.info(f"   First image: {sample['images'][0]}")
    else:
        # Import to backend
        if all_properties:
            logger.info(f"üì§ Importing {len(all_properties)} properties to backend...")
            
            try:
                result = api_client.import_properties(all_properties)
                logger.info(f"‚úÖ Import completed: {result}")
                
            except Exception as e:
                logger.error(f"‚ùå Import failed: {e}")

def test_single_property_with_images():
    """
    Test scraping a single property with detailed image extraction
    """
    from scraper import Property24Scraper
    
    scraper = Property24Scraper()
    
    # Scrape just one page of one area
    properties = scraper.scrape_area("sea-point", max_pages=1, extract_images=True)
    
    if properties:
        # Find a property with images
        for prop in properties:
            if prop.get('images'):
                logger.info(f"\nüè† Property: {prop['title']}")
                logger.info(f"üí∞ Price: R{prop.get('price', 0):,}")
                logger.info(f"üìç Area: {prop['area']}")
                logger.info(f"üñºÔ∏è  Images ({len(prop['images'])}):")
                for i, img in enumerate(prop['images'][:3]):
                    logger.info(f"   {i+1}. {img}")
                logger.info(f"üîó URL: {prop.get('url')}")
                break
    else:
        logger.warning("No properties found")

def analyze_image_extraction_success():
    """
    Analyze how successful image extraction is across different areas
    """
    from scraper import Property24Scraper
    
    scraper = Property24Scraper()
    areas = ["sea-point", "camps-bay", "green-point"]
    
    stats = {}
    
    for area in areas:
        properties = scraper.scrape_area(area, max_pages=1, extract_images=True)
        
        total = len(properties)
        with_images = sum(1 for p in properties if p.get('images'))
        avg_images = sum(len(p.get('images', [])) for p in properties) / total if total > 0 else 0
        
        stats[area] = {
            "total": total,
            "with_images": with_images,
            "percentage": (with_images / total * 100) if total > 0 else 0,
            "avg_images_per_property": avg_images
        }
    
    logger.info("\nüìä Image Extraction Statistics:")
    for area, stat in stats.items():
        logger.info(f"\n{area}:")
        logger.info(f"  Total properties: {stat['total']}")
        logger.info(f"  With images: {stat['with_images']} ({stat['percentage']:.1f}%)")
        logger.info(f"  Avg images per property: {stat['avg_images_per_property']:.1f}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "test":
            # Test single property with images
            test_single_property_with_images()
        elif sys.argv[1] == "analyze":
            # Analyze image extraction success
            analyze_image_extraction_success()
        elif sys.argv[1] == "dry-run":
            # Run full scraper but don't send to backend
            run_scraper_and_import_with_images(dry_run=True, max_pages=1)
        else:
            # Run normal import
            run_scraper_and_import_with_images(max_pages=2)
    else:
        # Default: scrape and import with images
        logger.info("üöÄ Running enhanced scraper with image extraction...")
        logger.info("   Use 'python property24_integration.py dry-run' to test without backend")
        logger.info("   Use 'python property24_integration.py test' to test single property")
        logger.info("   Use 'python property24_integration.py analyze' to analyze image extraction")
        
        run_scraper_and_import_with_images(
            areas=["sea-point", "green-point"],
            max_pages=1,
            extract_images=True
        )
        

================================================================================

File: database/database.py
--------------------------------------------------------------------------------
"""
MongoDB database configuration for Cape Town Property Discovery Platform
Using Beanie ODM with Motor (async MongoDB driver)
"""

import motor.motor_asyncio
from beanie import init_beanie
from models.property import Property, Comment
import os
from typing import List
import asyncio
import logging
from beanie import PydanticObjectId
from dotenv import load_dotenv
load_dotenv()

logger = logging.getLogger(__name__)

# MongoDB connection settings
MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://localhost:27018")
DATABASE_NAME = os.getenv("DATABASE_NAME", "cape_town_properties")

# Global database client
client = None
database = None

async def init_database():
    """
    Initialize MongoDB connection and Beanie ODM
    Call this when starting the application
    """
    global client, database
    
    try:
        # Create Motor client
        client = motor.motor_asyncio.AsyncIOMotorClient(MONGODB_URL)
        database = client[DATABASE_NAME]
        
        # Test connection
        await client.admin.command('ping')
        logger.info(f"‚úÖ Connected to MongoDB at {MONGODB_URL}")
        
        # Initialize Beanie with the Product and Comment documents
        await init_beanie(
            database=database,
            document_models=[Property, Comment]
        )
        
        logger.info("‚úÖ Beanie ODM initialized successfully!")
        logger.info(f"üì¶ Database: {DATABASE_NAME}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to connect to MongoDB: {e}")
        raise e

async def close_database():
    """Close database connection"""
    global client
    if client:
        client.close()
        logger.info("üì™ MongoDB connection closed")

async def reset_database():
    """
    Drop and recreate collections - use with caution!
    """
    global database
    if database:
        # Drop collections
        await database.drop_collection("properties")
        await database.drop_collection("comments")
        
        # Reinitialize Beanie
        await init_beanie(
            database=database,
            document_models=[Property, Comment]
        )
        
        logger.info("üîÑ Database reset complete!")

# Database utilities
class DatabaseUtils:
    """Utility functions for MongoDB operations"""
    
    @staticmethod
    async def get_property_count() -> int:
        """Get total number of properties"""
        return await Property.count()
    
    @staticmethod
    async def get_properties_by_area(area: str) -> List[Property]:
        """Get all properties in a specific area"""
        return await Property.find(Property.area == area).to_list()
    
    @staticmethod
    async def get_available_properties() -> List[Property]:
        """Get only available properties"""
        return await Property.find(Property.status == "available").to_list()
    
    @staticmethod
    async def bulk_insert_properties(properties_data: List[dict]) -> int:
        """
        Efficiently insert multiple properties
        Useful for bulk scraper imports
        """
        try:
            # Convert dicts to Property documents
            property_objects = []
            
            for prop_data in properties_data:
                # Check if property already exists by URL
                if prop_data.get("url"):
                    existing = await Property.find_one(Property.url == prop_data["url"])
                    if existing:
                        continue  # Skip duplicates
                
                # Create new property
                property_obj = Property(**prop_data)
                property_objects.append(property_obj)
            
            if property_objects:
                await Property.insert_many(property_objects)
                logger.info(f"‚úÖ Inserted {len(property_objects)} new properties")
            
            return len(property_objects)
            
        except Exception as e:
            logger.error(f"‚ùå Bulk insert failed: {e}")
            raise e
    
    @staticmethod
    async def update_property_status(property_id: str, status: str, sold_price: int = None):
        """Update property status (sold, under offer, etc.)"""
        from datetime import datetime
        
        try:
            property_obj = await Property.get(PydanticObjectId(property_id))
            if property_obj:
                property_obj.status = status
                if status == "sold" and sold_price:
                    property_obj.sold_price = sold_price
                    property_obj.sold_date = datetime.now()
                await property_obj.save()
                return property_obj
        except Exception as e:
            logger.error(f"‚ùå Failed to update property status: {e}")
        
        return None
    
    @staticmethod
    async def search_properties(query: str, limit: int = 50) -> List[Property]:
        """Search properties by text"""
        # MongoDB text search (requires text index)
        return await Property.find(
            {"$text": {"$search": query}}
        ).limit(limit).to_list()
    
    @staticmethod
    async def get_recent_properties(days: int = 7, limit: int = 100) -> List[Property]:
        """Get recently scraped properties"""
        from datetime import datetime, timedelta
        cutoff_date = datetime.now() - timedelta(days=days)
        
        return await Property.find(
            Property.scraped_at >= cutoff_date
        ).limit(limit).sort(-Property.scraped_at).to_list()

# Database health check
async def check_database_health() -> dict:
    """
    Check if database is healthy and return stats
    """
    try:
        global client, database
        
        if not client or not database:
            return {"status": "unhealthy", "error": "No database connection"}
        
        # Test connection
        await client.admin.command('ping')
        
        # Get statistics
        property_count = await Property.count()
        comment_count = await Comment.count()
        
        # Get latest scraped property
        latest_property = await Property.find().sort(-Property.scraped_at).first_or_none()
        
        # Database size info
        stats = await database.command("dbStats")
        
        return {
            "status": "healthy",
            "total_properties": property_count,
            "total_comments": comment_count,
            "latest_scrape": latest_property.scraped_at if latest_property else None,
            "database_name": DATABASE_NAME,
            "database_size_mb": round(stats.get("dataSize", 0) / 1024 / 1024, 2),
            "collections": stats.get("collections", 0),
            "mongodb_version": (await client.server_info()).get("version", "unknown")
        }
        
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e)
        }

# Indexing utilities
async def create_indexes():
    """
    Create additional indexes for better performance
    Call this after database initialization
    """
    try:
        # Text search index for properties
        await database.properties.create_index([
            ("title", "text"),
            ("area", "text"), 
            ("neighborhood_vibe", "text"),
            ("highlights", "text")
        ])
        
        # Geospatial index (if you add coordinates later)
        # await database.properties.create_index([("location", "2dsphere")])
        
        logger.info("‚úÖ Additional indexes created successfully!")
        
    except Exception as e:
        logger.error(f"‚ö†Ô∏è  Index creation failed: {e}")

# Migration utilities (for future schema changes)
async def create_migration_backup():
    """Create a backup collection before running migrations"""
    from datetime import datetime
    
    try:
        backup_name = f"properties_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # Copy collection
        pipeline = [{"$out": backup_name}]
        await database.properties.aggregate(pipeline).to_list(length=None)
        
        logger.info(f"üì¶ Database backup created: {backup_name}")
        return backup_name
        
    except Exception as e:
        logger.error(f"‚ö†Ô∏è  Backup creation failed: {e}")
        return None

# Connection test function
async def test_connection():
    """Test MongoDB connection"""
    try:
        await init_database()
        health = await check_database_health()
        await close_database()
        return health
    except Exception as e:
        return {"status": "failed", "error": str(e)}

# Command line testing
if __name__ == "__main__":
    async def main():
        print("üß™ Testing MongoDB connection...")
        result = await test_connection()
        print(f"Result: {result}")
    
    asyncio.run(main())


================================================================================

File: models/property.py
--------------------------------------------------------------------------------
"""
Property data models for the Cape Town Property Discovery Platform
MongoDB/Beanie version - Fixed Indexed Enum issue
"""

from beanie import Document, Indexed, PydanticObjectId
from pydantic import BaseModel, Field
from datetime import datetime
from enum import Enum
from typing import Optional, List

class PropertyStatus(str, Enum):
    AVAILABLE = "available"
    UNDER_OFFER = "under_offer"
    SOLD = "sold"
    OFF_MARKET = "off_market"

class PropertyType(str, Enum):
    APARTMENT = "Apartment"
    HOUSE = "House"
    TOWNHOUSE = "Townhouse"
    FLAT = "Flat"
    PROPERTY = "Property"

# MongoDB Document Models using Beanie
class Property(Document):
    """
    Main Property document for MongoDB
    Beanie automatically handles _id as ObjectId
    """
    
    # Core property data (from your scraper)
    title: str = Field(..., description="Property title")
    area: Indexed(str) = Field(..., description="Property area/location")
    price: Optional[int] = Field(None, description="Price in Rands")
    bedrooms: Optional[int] = None
    bathrooms: Optional[int] = None
    size_sqm: Optional[int] = None
    property_type: str = Field(default="Property", description="Type of property")
    
    # URLs and external data
    url: Optional[str] = None
    images: List[str] = Field(default_factory=list, description="List of image URLs")
    
    # Property details
    highlights: List[str] = Field(default_factory=list, description="Property highlights")
    neighborhood_vibe: Optional[str] = None
    
    # Status tracking - Fixed: using str type with index in Settings
    status: str = Field(default=PropertyStatus.AVAILABLE.value)
    listed_date: Optional[datetime] = None
    sold_date: Optional[datetime] = None
    withdrawn_date: Optional[datetime] = None
    sold_price: Optional[int] = None
    
    # Engagement metrics (for social features)
    views: int = Field(default=0)
    likes: int = Field(default=0)
    
    # Scraper metadata
    scraped_at: Indexed(datetime) = Field(default_factory=datetime.now)
    selector_used: Optional[str] = None  # Which scraper selector worked
    
    # MongoDB collection settings
    class Settings:
        name = "properties"  # Collection name
        indexes = [
            [("area", 1), ("status", 1)],  # Compound index for filtering
            [("status", 1)],  # Single index for status
            [("price", 1)],
            [("scraped_at", -1)],  # For recent properties
            [("url", 1)],  # For duplicate detection
        ]
    
    # Computed properties
    @property
    def price_per_sqm(self) -> Optional[float]:
        if self.price and self.size_sqm and self.size_sqm > 0:
            return round(self.price / self.size_sqm, 2)
        return None
    
    @property
    def days_on_market(self) -> Optional[int]:
        if self.listed_date:
            end_date = self.sold_date or self.withdrawn_date or datetime.now()
            return (end_date - self.listed_date).days
        return None
    
    @property
    def is_deal(self) -> bool:
        """Simple logic to identify deals - you can enhance this"""
        if not self.price_per_sqm:
            return False
        
        # Example: Properties under R15k per sqm in prime areas
        prime_areas = ["clifton", "camps-bay", "sea-point"]
        if self.area.lower().replace(" ", "-") in prime_areas:
            return self.price_per_sqm < 15000
        
        # General deal threshold
        return self.price_per_sqm < 12000

class Comment(Document):
    """Comments on properties"""
    
    property_id: PydanticObjectId = Field(..., description="Reference to Property")
    user_name: str = Field(..., max_length=100)
    user_avatar: str = Field(default="üë§", max_length=10)
    text: str = Field(..., description="Comment text")
    likes: int = Field(default=0)
    created_at: datetime = Field(default_factory=datetime.now)
    
    class Settings:
        name = "comments"
        indexes = [
            [("property_id", 1), ("created_at", -1)],  # Comments by property, newest first
        ]

# Pydantic models for API requests/responses (no changes needed from SQLAlchemy version)
class PropertyBase(BaseModel):
    title: str
    area: str
    price: Optional[int] = None
    bedrooms: Optional[int] = None
    bathrooms: Optional[int] = None
    size_sqm: Optional[int] = None
    property_type: str = "Property"
    url: Optional[str] = None
    images: Optional[List[str]] = []
    highlights: Optional[List[str]] = []
    neighborhood_vibe: Optional[str] = None
    status: PropertyStatus = PropertyStatus.AVAILABLE

class PropertyCreate(PropertyBase):
    """For creating new properties from scraper"""
    selector_used: Optional[str] = None
    listed_date: Optional[datetime] = None

class PropertyUpdate(BaseModel):
    """For updating property status, prices, etc."""
    status: Optional[PropertyStatus] = None
    sold_price: Optional[int] = None
    sold_date: Optional[datetime] = None
    withdrawn_date: Optional[datetime] = None
    views: Optional[int] = None
    likes: Optional[int] = None

class PropertyResponse(BaseModel):
    """Full property response for frontend"""
    id: str = Field(alias="_id")  # MongoDB ObjectId as string
    title: str
    area: str
    price: Optional[int] = None
    bedrooms: Optional[int] = None
    bathrooms: Optional[int] = None
    size_sqm: Optional[int] = None
    property_type: str
    url: Optional[str] = None
    images: List[str] = []
    highlights: List[str] = []
    neighborhood_vibe: Optional[str] = None
    status: PropertyStatus
    views: int
    likes: int
    scraped_at: datetime
    
    # Computed fields
    price_per_sqm: Optional[float] = None
    days_on_market: Optional[int] = None
    deal: bool = False
    
    class Config:
        populate_by_name = True  # Allow both _id and id
        
    @classmethod
    def from_property(cls, property_doc: Property):
        """Convert Property document to response model"""
        # Convert status string back to enum
        status_enum = PropertyStatus(property_doc.status) if isinstance(property_doc.status, str) else property_doc.status
        
        return cls(
            id=str(property_doc.id),
            title=property_doc.title,
            area=property_doc.area,
            price=property_doc.price,
            bedrooms=property_doc.bedrooms,
            bathrooms=property_doc.bathrooms,
            size_sqm=property_doc.size_sqm,
            property_type=property_doc.property_type,
            url=property_doc.url,
            images=property_doc.images,
            highlights=property_doc.highlights,
            neighborhood_vibe=property_doc.neighborhood_vibe,
            status=status_enum,
            views=property_doc.views,
            likes=property_doc.likes,
            scraped_at=property_doc.scraped_at,
            price_per_sqm=property_doc.price_per_sqm,
            days_on_market=property_doc.days_on_market,
            deal=property_doc.is_deal
        )

class CommentCreate(BaseModel):
    user_name: str
    user_avatar: str = "üë§"
    text: str

class CommentResponse(BaseModel):
    id: str = Field(alias="_id")
    property_id: str
    user_name: str
    user_avatar: str
    text: str
    likes: int
    created_at: datetime
    
    class Config:
        populate_by_name = True
        
    @classmethod
    def from_comment(cls, comment_doc: Comment):
        """Convert Comment document to response model"""
        return cls(
            id=str(comment_doc.id),
            property_id=str(comment_doc.property_id),
            user_name=comment_doc.user_name,
            user_avatar=comment_doc.user_avatar,
            text=comment_doc.text,
            likes=comment_doc.likes,
            created_at=comment_doc.created_at
        )


def convert_scraper_output_to_property(scraper_data: dict) -> PropertyCreate:
    """
    Convert your existing scraper output to our Property model
    
    Expected scraper_data format (from your existing scraper):
    {
        "title": "2 Bedroom Apartment",
        "area": "Sea Point", 
        "price": 1200000,
        "bedrooms": 2,
        "bathrooms": 2,
        "size_sqm": 85,
        "type": "Apartment",
        "url": "https://property24.com/...",
        "selector_used": "div.listing_tile",
        "images": ["https://...", "https://..."],  # NOW EXPECTING IMAGES!
        "highlights": ["Pool", "Security"]
    }
    """
    
    # Map your scraper keys to our model
    property_data = PropertyCreate(
        title=scraper_data.get("title", "Property"),
        area=scraper_data.get("area", "Unknown"),
        price=scraper_data.get("price"),
        bedrooms=scraper_data.get("bedrooms"),
        bathrooms=scraper_data.get("bathrooms"),
        size_sqm=scraper_data.get("size_sqm"),
        property_type=scraper_data.get("type", "Property"),
        url=scraper_data.get("url"),
        selector_used=scraper_data.get("selector_used"),
        
        # ‚úÖ ADD THIS LINE - THIS IS THE FIX!
        images=scraper_data.get("images", []),
        
        # Also get highlights from scraper if available
        highlights=scraper_data.get("highlights", generate_area_highlights(scraper_data.get("area", ""))),
        neighborhood_vibe=scraper_data.get("neighborhood_vibe", generate_neighborhood_vibe(scraper_data.get("area", ""))),
        listed_date=datetime.now()
    )
    
    return property_data

def generate_area_highlights(area: str) -> List[str]:
    """Generate highlights based on Cape Town area"""
    area_lower = area.lower().replace(" ", "-")
    
    highlights_map = {
        "sea-point": ["2-min walk to beach", "Great coffee nearby", "Mountain views"],
        "camps-bay": ["Ocean views", "Private terrace", "Designer kitchen"],
        "green-point": ["Walking to V&A", "Modern finishes", "Gym in building"],
        "clifton": ["Beach access", "Luxury finishes", "Concierge service"],
        "fresnaye": ["Large garden", "Sea glimpses", "Double garage"],
        "de-waterkant": ["Industrial chic", "High ceilings", "Trendy location"],
        "gardens": ["City bowl living", "Cultural attractions", "Easy CBD access"],
        "oranjezicht": ["Quiet residential", "Mountain proximity", "Historic charm"],
        "tamboerskloof": ["Trendy cafes", "Art galleries", "City views"],
        "vredehoek": ["Peaceful setting", "Nature access", "Stunning views"]
    }
    
    return highlights_map.get(area_lower, ["Great location", "Well-positioned", "Good access"])

def generate_neighborhood_vibe(area: str) -> str:
    """Generate neighborhood descriptions based on area"""
    area_lower = area.lower().replace(" ", "-")
    
    vibes_map = {
        "sea-point": "Vibrant beachfront living with excellent restaurants",
        "camps-bay": "Exclusive beach paradise with stunning sunsets", 
        "green-point": "Urban sophistication meets waterfront convenience",
        "clifton": "Ultimate luxury beachfront lifestyle",
        "fresnaye": "Peaceful residential area with stunning city views",
        "de-waterkant": "Hip, artistic quarter with great restaurants",
        "gardens": "Cultural heart of Cape Town with historic charm",
        "oranjezicht": "Quiet residential haven below Table Mountain",
        "tamboerskloof": "Trendy hillside community with artistic flair",
        "vredehoek": "Tranquil mountain setting with panoramic views"
    }
    
    return vibes_map.get(area_lower, "Desirable Cape Town location")


================================================================================

